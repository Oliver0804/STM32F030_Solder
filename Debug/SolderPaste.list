
SolderPaste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000247c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800253c  0800253c  0001253c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002574  08002574  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002574  08002574  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002574  08002574  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002574  08002574  00012574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002578  08002578  00012578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800257c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  08002588  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08002588  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006996  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001854  00000000  00000000  000269ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000688  00000000  00000000  00028220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e0  00000000  00000000  000288a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ed34  00000000  00000000  00028e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008967  00000000  00000000  00037bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057607  00000000  00000000  00040523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00097b2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001538  00000000  00000000  00097b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002524 	.word	0x08002524

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002524 	.word	0x08002524

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	0018      	movs	r0, r3
 800022a:	2314      	movs	r3, #20
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f002 f970 	bl	8002514 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000234:	4b25      	ldr	r3, [pc, #148]	; (80002cc <MX_GPIO_Init+0xac>)
 8000236:	695a      	ldr	r2, [r3, #20]
 8000238:	4b24      	ldr	r3, [pc, #144]	; (80002cc <MX_GPIO_Init+0xac>)
 800023a:	2180      	movs	r1, #128	; 0x80
 800023c:	0289      	lsls	r1, r1, #10
 800023e:	430a      	orrs	r2, r1
 8000240:	615a      	str	r2, [r3, #20]
 8000242:	4b22      	ldr	r3, [pc, #136]	; (80002cc <MX_GPIO_Init+0xac>)
 8000244:	695a      	ldr	r2, [r3, #20]
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	029b      	lsls	r3, r3, #10
 800024a:	4013      	ands	r3, r2
 800024c:	603b      	str	r3, [r7, #0]
 800024e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_Pin|M2_Pin|M3_Pin|M4_Pin
 8000250:	2390      	movs	r3, #144	; 0x90
 8000252:	05db      	lsls	r3, r3, #23
 8000254:	2200      	movs	r2, #0
 8000256:	21f8      	movs	r1, #248	; 0xf8
 8000258:	0018      	movs	r0, r3
 800025a:	f000 fe3b 	bl	8000ed4 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin|B3_Pin;
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2207      	movs	r2, #7
 8000262:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	4a1a      	ldr	r2, [pc, #104]	; (80002d0 <MX_GPIO_Init+0xb0>)
 8000268:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2201      	movs	r2, #1
 800026e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000270:	1d3a      	adds	r2, r7, #4
 8000272:	2390      	movs	r3, #144	; 0x90
 8000274:	05db      	lsls	r3, r3, #23
 8000276:	0011      	movs	r1, r2
 8000278:	0018      	movs	r0, r3
 800027a:	f000 fcbb 	bl	8000bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = M1_Pin|M2_Pin|M3_Pin|M4_Pin
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	22f8      	movs	r2, #248	; 0xf8
 8000282:	601a      	str	r2, [r3, #0]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2201      	movs	r2, #1
 8000288:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000296:	1d3a      	adds	r2, r7, #4
 8000298:	2390      	movs	r3, #144	; 0x90
 800029a:	05db      	lsls	r3, r3, #23
 800029c:	0011      	movs	r1, r2
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 fca8 	bl	8000bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2100      	movs	r1, #0
 80002a8:	2005      	movs	r0, #5
 80002aa:	f000 fbf3 	bl	8000a94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80002ae:	2005      	movs	r0, #5
 80002b0:	f000 fc05 	bl	8000abe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2100      	movs	r1, #0
 80002b8:	2006      	movs	r0, #6
 80002ba:	f000 fbeb 	bl	8000a94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80002be:	2006      	movs	r0, #6
 80002c0:	f000 fbfd 	bl	8000abe <HAL_NVIC_EnableIRQ>

}
 80002c4:	46c0      	nop			; (mov r8, r8)
 80002c6:	46bd      	mov	sp, r7
 80002c8:	b006      	add	sp, #24
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40021000 	.word	0x40021000
 80002d0:	10210000 	.word	0x10210000

080002d4 <motor_step>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int motor_step(int counter_step){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	if(counter_step==0){
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d11c      	bne.n	800031c <motor_step+0x48>
		HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin,1);
 80002e2:	2390      	movs	r3, #144	; 0x90
 80002e4:	05db      	lsls	r3, r3, #23
 80002e6:	2201      	movs	r2, #1
 80002e8:	2108      	movs	r1, #8
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 fdf2 	bl	8000ed4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin,0);
 80002f0:	2390      	movs	r3, #144	; 0x90
 80002f2:	05db      	lsls	r3, r3, #23
 80002f4:	2200      	movs	r2, #0
 80002f6:	2110      	movs	r1, #16
 80002f8:	0018      	movs	r0, r3
 80002fa:	f000 fdeb 	bl	8000ed4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M3_GPIO_Port, M3_Pin,0);
 80002fe:	2390      	movs	r3, #144	; 0x90
 8000300:	05db      	lsls	r3, r3, #23
 8000302:	2200      	movs	r2, #0
 8000304:	2120      	movs	r1, #32
 8000306:	0018      	movs	r0, r3
 8000308:	f000 fde4 	bl	8000ed4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M4_GPIO_Port, M4_Pin,0);
 800030c:	2390      	movs	r3, #144	; 0x90
 800030e:	05db      	lsls	r3, r3, #23
 8000310:	2200      	movs	r2, #0
 8000312:	2140      	movs	r1, #64	; 0x40
 8000314:	0018      	movs	r0, r3
 8000316:	f000 fddd 	bl	8000ed4 <HAL_GPIO_WritePin>
 800031a:	e062      	b.n	80003e2 <motor_step+0x10e>
	}else if(counter_step==1){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d11c      	bne.n	800035c <motor_step+0x88>
		HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin,0);
 8000322:	2390      	movs	r3, #144	; 0x90
 8000324:	05db      	lsls	r3, r3, #23
 8000326:	2200      	movs	r2, #0
 8000328:	2108      	movs	r1, #8
 800032a:	0018      	movs	r0, r3
 800032c:	f000 fdd2 	bl	8000ed4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin,1);
 8000330:	2390      	movs	r3, #144	; 0x90
 8000332:	05db      	lsls	r3, r3, #23
 8000334:	2201      	movs	r2, #1
 8000336:	2110      	movs	r1, #16
 8000338:	0018      	movs	r0, r3
 800033a:	f000 fdcb 	bl	8000ed4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M3_GPIO_Port, M3_Pin,0);
 800033e:	2390      	movs	r3, #144	; 0x90
 8000340:	05db      	lsls	r3, r3, #23
 8000342:	2200      	movs	r2, #0
 8000344:	2120      	movs	r1, #32
 8000346:	0018      	movs	r0, r3
 8000348:	f000 fdc4 	bl	8000ed4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M4_GPIO_Port, M4_Pin,0);
 800034c:	2390      	movs	r3, #144	; 0x90
 800034e:	05db      	lsls	r3, r3, #23
 8000350:	2200      	movs	r2, #0
 8000352:	2140      	movs	r1, #64	; 0x40
 8000354:	0018      	movs	r0, r3
 8000356:	f000 fdbd 	bl	8000ed4 <HAL_GPIO_WritePin>
 800035a:	e042      	b.n	80003e2 <motor_step+0x10e>
	}else if(counter_step==2){
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2b02      	cmp	r3, #2
 8000360:	d11c      	bne.n	800039c <motor_step+0xc8>
		HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin,0);
 8000362:	2390      	movs	r3, #144	; 0x90
 8000364:	05db      	lsls	r3, r3, #23
 8000366:	2200      	movs	r2, #0
 8000368:	2108      	movs	r1, #8
 800036a:	0018      	movs	r0, r3
 800036c:	f000 fdb2 	bl	8000ed4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin,0);
 8000370:	2390      	movs	r3, #144	; 0x90
 8000372:	05db      	lsls	r3, r3, #23
 8000374:	2200      	movs	r2, #0
 8000376:	2110      	movs	r1, #16
 8000378:	0018      	movs	r0, r3
 800037a:	f000 fdab 	bl	8000ed4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M3_GPIO_Port, M3_Pin,1);
 800037e:	2390      	movs	r3, #144	; 0x90
 8000380:	05db      	lsls	r3, r3, #23
 8000382:	2201      	movs	r2, #1
 8000384:	2120      	movs	r1, #32
 8000386:	0018      	movs	r0, r3
 8000388:	f000 fda4 	bl	8000ed4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M4_GPIO_Port, M4_Pin,0);
 800038c:	2390      	movs	r3, #144	; 0x90
 800038e:	05db      	lsls	r3, r3, #23
 8000390:	2200      	movs	r2, #0
 8000392:	2140      	movs	r1, #64	; 0x40
 8000394:	0018      	movs	r0, r3
 8000396:	f000 fd9d 	bl	8000ed4 <HAL_GPIO_WritePin>
 800039a:	e022      	b.n	80003e2 <motor_step+0x10e>
	}else if(counter_step==3){
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	2b03      	cmp	r3, #3
 80003a0:	d11c      	bne.n	80003dc <motor_step+0x108>
		HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin,0);
 80003a2:	2390      	movs	r3, #144	; 0x90
 80003a4:	05db      	lsls	r3, r3, #23
 80003a6:	2200      	movs	r2, #0
 80003a8:	2108      	movs	r1, #8
 80003aa:	0018      	movs	r0, r3
 80003ac:	f000 fd92 	bl	8000ed4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin,0);
 80003b0:	2390      	movs	r3, #144	; 0x90
 80003b2:	05db      	lsls	r3, r3, #23
 80003b4:	2200      	movs	r2, #0
 80003b6:	2110      	movs	r1, #16
 80003b8:	0018      	movs	r0, r3
 80003ba:	f000 fd8b 	bl	8000ed4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M3_GPIO_Port, M3_Pin,0);
 80003be:	2390      	movs	r3, #144	; 0x90
 80003c0:	05db      	lsls	r3, r3, #23
 80003c2:	2200      	movs	r2, #0
 80003c4:	2120      	movs	r1, #32
 80003c6:	0018      	movs	r0, r3
 80003c8:	f000 fd84 	bl	8000ed4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M4_GPIO_Port, M4_Pin,1);
 80003cc:	2390      	movs	r3, #144	; 0x90
 80003ce:	05db      	lsls	r3, r3, #23
 80003d0:	2201      	movs	r2, #1
 80003d2:	2140      	movs	r1, #64	; 0x40
 80003d4:	0018      	movs	r0, r3
 80003d6:	f000 fd7d 	bl	8000ed4 <HAL_GPIO_WritePin>
 80003da:	e002      	b.n	80003e2 <motor_step+0x10e>
	}else{
		return -1;
 80003dc:	2301      	movs	r3, #1
 80003de:	425b      	negs	r3, r3
 80003e0:	e005      	b.n	80003ee <motor_step+0x11a>
	}
	HAL_Delay(motor.step_time);
 80003e2:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <motor_step+0x124>)
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	0018      	movs	r0, r3
 80003e8:	f000 fa84 	bl	80008f4 <HAL_Delay>
	return 1;
 80003ec:	2301      	movs	r3, #1
}
 80003ee:	0018      	movs	r0, r3
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b002      	add	sp, #8
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	20000028 	.word	0x20000028

080003fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000400:	f000 fa14 	bl	800082c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000404:	f000 f852 	bl	80004ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000408:	f7ff ff0a 	bl	8000220 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800040c:	f000 f95e 	bl	80006cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  motor.step_val=4;//預設走的步數
 8000410:	4b23      	ldr	r3, [pc, #140]	; (80004a0 <main+0xa4>)
 8000412:	2204      	movs	r2, #4
 8000414:	601a      	str	r2, [r3, #0]
  motor.led_blink=100;
 8000416:	4b22      	ldr	r3, [pc, #136]	; (80004a0 <main+0xa4>)
 8000418:	2264      	movs	r2, #100	; 0x64
 800041a:	61da      	str	r2, [r3, #28]
  motor.step_time=100;//100ms
 800041c:	4b20      	ldr	r3, [pc, #128]	; (80004a0 <main+0xa4>)
 800041e:	2264      	movs	r2, #100	; 0x64
 8000420:	609a      	str	r2, [r3, #8]
  motor.step_localtion=0;
 8000422:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <main+0xa4>)
 8000424:	2200      	movs	r2, #0
 8000426:	60da      	str	r2, [r3, #12]
  motor.step_target=0;
 8000428:	4b1d      	ldr	r3, [pc, #116]	; (80004a0 <main+0xa4>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  motor.step_localtion_max=3000;
 800042e:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <main+0xa4>)
 8000430:	4a1c      	ldr	r2, [pc, #112]	; (80004a4 <main+0xa8>)
 8000432:	615a      	str	r2, [r3, #20]
  motor.step_localtion_min=0;
 8000434:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <main+0xa4>)
 8000436:	2200      	movs	r2, #0
 8000438:	619a      	str	r2, [r3, #24]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

if(motor.step_run==1){
 800043a:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <main+0xa4>)
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d121      	bne.n	8000486 <main+0x8a>
	if(motor_step(motor.step_localtion%4)!=-1){
 8000442:	4b17      	ldr	r3, [pc, #92]	; (80004a0 <main+0xa4>)
 8000444:	68db      	ldr	r3, [r3, #12]
 8000446:	4a18      	ldr	r2, [pc, #96]	; (80004a8 <main+0xac>)
 8000448:	4013      	ands	r3, r2
 800044a:	d504      	bpl.n	8000456 <main+0x5a>
 800044c:	3b01      	subs	r3, #1
 800044e:	2204      	movs	r2, #4
 8000450:	4252      	negs	r2, r2
 8000452:	4313      	orrs	r3, r2
 8000454:	3301      	adds	r3, #1
 8000456:	0018      	movs	r0, r3
 8000458:	f7ff ff3c 	bl	80002d4 <motor_step>
 800045c:	0003      	movs	r3, r0
 800045e:	3301      	adds	r3, #1
 8000460:	d00d      	beq.n	800047e <main+0x82>
		if(motor.step_localtion>0){
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <main+0xa4>)
 8000464:	68db      	ldr	r3, [r3, #12]
 8000466:	2b00      	cmp	r3, #0
 8000468:	dd05      	ble.n	8000476 <main+0x7a>
			motor.step_localtion--;
 800046a:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <main+0xa4>)
 800046c:	68db      	ldr	r3, [r3, #12]
 800046e:	1e5a      	subs	r2, r3, #1
 8000470:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <main+0xa4>)
 8000472:	60da      	str	r2, [r3, #12]
 8000474:	e7e1      	b.n	800043a <main+0x3e>
		}else{
			motor.step_run=0;
 8000476:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <main+0xa4>)
 8000478:	2200      	movs	r2, #0
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	e7dd      	b.n	800043a <main+0x3e>
		}
	}else{
		motor.step_run=0;
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <main+0xa4>)
 8000480:	2200      	movs	r2, #0
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	e7d9      	b.n	800043a <main+0x3e>
		/*
		 * error
		 */
	}
}else{
	HAL_Delay(motor.led_blink);
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <main+0xa4>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	0018      	movs	r0, r3
 800048c:	f000 fa32 	bl	80008f4 <HAL_Delay>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000490:	2390      	movs	r3, #144	; 0x90
 8000492:	05db      	lsls	r3, r3, #23
 8000494:	2180      	movs	r1, #128	; 0x80
 8000496:	0018      	movs	r0, r3
 8000498:	f000 fd39 	bl	8000f0e <HAL_GPIO_TogglePin>
if(motor.step_run==1){
 800049c:	e7cd      	b.n	800043a <main+0x3e>
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	20000028 	.word	0x20000028
 80004a4:	00000bb8 	.word	0x00000bb8
 80004a8:	80000003 	.word	0x80000003

080004ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b095      	sub	sp, #84	; 0x54
 80004b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	2420      	movs	r4, #32
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0018      	movs	r0, r3
 80004b8:	2330      	movs	r3, #48	; 0x30
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f002 f829 	bl	8002514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c2:	2310      	movs	r3, #16
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	0018      	movs	r0, r3
 80004c8:	2310      	movs	r3, #16
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f002 f821 	bl	8002514 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004d2:	003b      	movs	r3, r7
 80004d4:	0018      	movs	r0, r3
 80004d6:	2310      	movs	r3, #16
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f002 f81a 	bl	8002514 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e0:	0021      	movs	r1, r4
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2202      	movs	r2, #2
 80004e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2201      	movs	r2, #1
 80004ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2210      	movs	r2, #16
 80004f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2200      	movs	r2, #0
 80004f8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fd47 	bl	8000f90 <HAL_RCC_OscConfig>
 8000502:	1e03      	subs	r3, r0, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000506:	f000 f828 	bl	800055a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050a:	2110      	movs	r1, #16
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2207      	movs	r2, #7
 8000510:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2200      	movs	r2, #0
 8000516:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2100      	movs	r1, #0
 8000528:	0018      	movs	r0, r3
 800052a:	f001 f84b 	bl	80015c4 <HAL_RCC_ClockConfig>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000532:	f000 f812 	bl	800055a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000536:	003b      	movs	r3, r7
 8000538:	2201      	movs	r2, #1
 800053a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800053c:	003b      	movs	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000542:	003b      	movs	r3, r7
 8000544:	0018      	movs	r0, r3
 8000546:	f001 f98f 	bl	8001868 <HAL_RCCEx_PeriphCLKConfig>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800054e:	f000 f804 	bl	800055a <Error_Handler>
  }
}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	b015      	add	sp, #84	; 0x54
 8000558:	bd90      	pop	{r4, r7, pc}

0800055a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800055e:	b672      	cpsid	i
}
 8000560:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000562:	e7fe      	b.n	8000562 <Error_Handler+0x8>

08000564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <HAL_MspInit+0x44>)
 800056c:	699a      	ldr	r2, [r3, #24]
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <HAL_MspInit+0x44>)
 8000570:	2101      	movs	r1, #1
 8000572:	430a      	orrs	r2, r1
 8000574:	619a      	str	r2, [r3, #24]
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <HAL_MspInit+0x44>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	2201      	movs	r2, #1
 800057c:	4013      	ands	r3, r2
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <HAL_MspInit+0x44>)
 8000584:	69da      	ldr	r2, [r3, #28]
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <HAL_MspInit+0x44>)
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	0549      	lsls	r1, r1, #21
 800058c:	430a      	orrs	r2, r1
 800058e:	61da      	str	r2, [r3, #28]
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <HAL_MspInit+0x44>)
 8000592:	69da      	ldr	r2, [r3, #28]
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	055b      	lsls	r3, r3, #21
 8000598:	4013      	ands	r3, r2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b002      	add	sp, #8
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	40021000 	.word	0x40021000

080005ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <NMI_Handler+0x4>

080005b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <HardFault_Handler+0x4>

080005b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d0:	f000 f974 	bl	80008bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	  if (__HAL_GPIO_EXTI_GET_IT(B1_Pin) != RESET) {
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <EXTI0_1_IRQHandler+0x84>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	2201      	movs	r2, #1
 80005e6:	4013      	ands	r3, r2
 80005e8:	d01e      	beq.n	8000628 <EXTI0_1_IRQHandler+0x4c>
		  motor.step_run=1;
 80005ea:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <EXTI0_1_IRQHandler+0x88>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	605a      	str	r2, [r3, #4]
		  motor.step_localtion=motor.step_val+motor.step_localtion;
 80005f0:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <EXTI0_1_IRQHandler+0x88>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <EXTI0_1_IRQHandler+0x88>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	18d2      	adds	r2, r2, r3
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <EXTI0_1_IRQHandler+0x88>)
 80005fc:	60da      	str	r2, [r3, #12]
		  if(motor.step_localtion>motor.step_localtion_max){
 80005fe:	4b19      	ldr	r3, [pc, #100]	; (8000664 <EXTI0_1_IRQHandler+0x88>)
 8000600:	68da      	ldr	r2, [r3, #12]
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <EXTI0_1_IRQHandler+0x88>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	429a      	cmp	r2, r3
 8000608:	dd04      	ble.n	8000614 <EXTI0_1_IRQHandler+0x38>
			  motor.step_localtion=motor.step_localtion_max;
 800060a:	4b16      	ldr	r3, [pc, #88]	; (8000664 <EXTI0_1_IRQHandler+0x88>)
 800060c:	695a      	ldr	r2, [r3, #20]
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <EXTI0_1_IRQHandler+0x88>)
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	e009      	b.n	8000628 <EXTI0_1_IRQHandler+0x4c>
		  }else if (motor.step_localtion<motor.step_localtion_min){
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <EXTI0_1_IRQHandler+0x88>)
 8000616:	68da      	ldr	r2, [r3, #12]
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <EXTI0_1_IRQHandler+0x88>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	429a      	cmp	r2, r3
 800061e:	da03      	bge.n	8000628 <EXTI0_1_IRQHandler+0x4c>
			  motor.step_localtion=motor.step_localtion_min;
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <EXTI0_1_IRQHandler+0x88>)
 8000622:	699a      	ldr	r2, [r3, #24]
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <EXTI0_1_IRQHandler+0x88>)
 8000626:	60da      	str	r2, [r3, #12]
		  }
	      }
	  if (__HAL_GPIO_EXTI_GET_IT(B2_Pin) != RESET) {
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <EXTI0_1_IRQHandler+0x84>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	2202      	movs	r2, #2
 800062e:	4013      	ands	r3, r2
 8000630:	d00d      	beq.n	800064e <EXTI0_1_IRQHandler+0x72>
		  motor.led_blink+=10;
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <EXTI0_1_IRQHandler+0x88>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	330a      	adds	r3, #10
 8000638:	001a      	movs	r2, r3
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <EXTI0_1_IRQHandler+0x88>)
 800063c:	61da      	str	r2, [r3, #28]
		  if(motor.led_blink>3000){
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <EXTI0_1_IRQHandler+0x88>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	4a09      	ldr	r2, [pc, #36]	; (8000668 <EXTI0_1_IRQHandler+0x8c>)
 8000644:	4293      	cmp	r3, r2
 8000646:	dd02      	ble.n	800064e <EXTI0_1_IRQHandler+0x72>
			  motor.led_blink=3000;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <EXTI0_1_IRQHandler+0x88>)
 800064a:	4a07      	ldr	r2, [pc, #28]	; (8000668 <EXTI0_1_IRQHandler+0x8c>)
 800064c:	61da      	str	r2, [r3, #28]
		  }
	      }
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800064e:	2001      	movs	r0, #1
 8000650:	f000 fc78 	bl	8000f44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000654:	2002      	movs	r0, #2
 8000656:	f000 fc75 	bl	8000f44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40010400 	.word	0x40010400
 8000664:	20000028 	.word	0x20000028
 8000668:	00000bb8 	.word	0x00000bb8

0800066c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */
	  if (__HAL_GPIO_EXTI_GET_IT(B3_Pin) != RESET) {
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <EXTI2_3_IRQHandler+0x34>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	2204      	movs	r2, #4
 8000676:	4013      	ands	r3, r2
 8000678:	d00c      	beq.n	8000694 <EXTI2_3_IRQHandler+0x28>
		  motor.led_blink-=10;
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <EXTI2_3_IRQHandler+0x38>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	3b0a      	subs	r3, #10
 8000680:	001a      	movs	r2, r3
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <EXTI2_3_IRQHandler+0x38>)
 8000684:	61da      	str	r2, [r3, #28]
		  if(motor.led_blink<0){
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <EXTI2_3_IRQHandler+0x38>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	2b00      	cmp	r3, #0
 800068c:	da02      	bge.n	8000694 <EXTI2_3_IRQHandler+0x28>
			  motor.led_blink=0;
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <EXTI2_3_IRQHandler+0x38>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
		  }
	      }
  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000694:	2004      	movs	r0, #4
 8000696:	f000 fc55 	bl	8000f44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40010400 	.word	0x40010400
 80006a4:	20000028 	.word	0x20000028

080006a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <USART1_IRQHandler+0x14>)
 80006ae:	0018      	movs	r0, r3
 80006b0:	f001 f9fc 	bl	8001aac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	20000048 	.word	0x20000048

080006c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <MX_USART1_UART_Init+0x58>)
 80006d2:	4a15      	ldr	r2, [pc, #84]	; (8000728 <MX_USART1_UART_Init+0x5c>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006d6:	4b13      	ldr	r3, [pc, #76]	; (8000724 <MX_USART1_UART_Init+0x58>)
 80006d8:	22e1      	movs	r2, #225	; 0xe1
 80006da:	0252      	lsls	r2, r2, #9
 80006dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_USART1_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_USART1_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_USART1_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_USART1_UART_Init+0x58>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_USART1_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_USART1_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_USART1_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_USART1_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <MX_USART1_UART_Init+0x58>)
 8000710:	0018      	movs	r0, r3
 8000712:	f001 f977 	bl	8001a04 <HAL_UART_Init>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800071a:	f7ff ff1e 	bl	800055a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000048 	.word	0x20000048
 8000728:	40013800 	.word	0x40013800

0800072c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b08b      	sub	sp, #44	; 0x2c
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	2414      	movs	r4, #20
 8000736:	193b      	adds	r3, r7, r4
 8000738:	0018      	movs	r0, r3
 800073a:	2314      	movs	r3, #20
 800073c:	001a      	movs	r2, r3
 800073e:	2100      	movs	r1, #0
 8000740:	f001 fee8 	bl	8002514 <memset>
  if(uartHandle->Instance==USART1)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <HAL_UART_MspInit+0xa4>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d13b      	bne.n	80007c6 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <HAL_UART_MspInit+0xa8>)
 8000750:	699a      	ldr	r2, [r3, #24]
 8000752:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <HAL_UART_MspInit+0xa8>)
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	01c9      	lsls	r1, r1, #7
 8000758:	430a      	orrs	r2, r1
 800075a:	619a      	str	r2, [r3, #24]
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <HAL_UART_MspInit+0xa8>)
 800075e:	699a      	ldr	r2, [r3, #24]
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	01db      	lsls	r3, r3, #7
 8000764:	4013      	ands	r3, r2
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <HAL_UART_MspInit+0xa8>)
 800076c:	695a      	ldr	r2, [r3, #20]
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <HAL_UART_MspInit+0xa8>)
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	0289      	lsls	r1, r1, #10
 8000774:	430a      	orrs	r2, r1
 8000776:	615a      	str	r2, [r3, #20]
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <HAL_UART_MspInit+0xa8>)
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	029b      	lsls	r3, r3, #10
 8000780:	4013      	ands	r3, r2
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	22c0      	movs	r2, #192	; 0xc0
 800078a:	00d2      	lsls	r2, r2, #3
 800078c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	0021      	movs	r1, r4
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2202      	movs	r2, #2
 8000794:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2203      	movs	r2, #3
 80007a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2201      	movs	r2, #1
 80007a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	187a      	adds	r2, r7, r1
 80007aa:	2390      	movs	r3, #144	; 0x90
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	0011      	movs	r1, r2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 fa1f 	bl	8000bf4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	201b      	movs	r0, #27
 80007bc:	f000 f96a 	bl	8000a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007c0:	201b      	movs	r0, #27
 80007c2:	f000 f97c 	bl	8000abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b00b      	add	sp, #44	; 0x2c
 80007cc:	bd90      	pop	{r4, r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	40013800 	.word	0x40013800
 80007d4:	40021000 	.word	0x40021000

080007d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d8:	480d      	ldr	r0, [pc, #52]	; (8000810 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007dc:	480d      	ldr	r0, [pc, #52]	; (8000814 <LoopForever+0x6>)
  ldr r1, =_edata
 80007de:	490e      	ldr	r1, [pc, #56]	; (8000818 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e0:	4a0e      	ldr	r2, [pc, #56]	; (800081c <LoopForever+0xe>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a0b      	ldr	r2, [pc, #44]	; (8000820 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f4:	4c0b      	ldr	r4, [pc, #44]	; (8000824 <LoopForever+0x16>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000802:	f7ff ff5d 	bl	80006c0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000806:	f001 fe61 	bl	80024cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800080a:	f7ff fdf7 	bl	80003fc <main>

0800080e <LoopForever>:

LoopForever:
    b LoopForever
 800080e:	e7fe      	b.n	800080e <LoopForever>
  ldr   r0, =_estack
 8000810:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000818:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800081c:	0800257c 	.word	0x0800257c
  ldr r2, =_sbss
 8000820:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000824:	200000d0 	.word	0x200000d0

08000828 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000828:	e7fe      	b.n	8000828 <ADC1_IRQHandler>
	...

0800082c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <HAL_Init+0x24>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_Init+0x24>)
 8000836:	2110      	movs	r1, #16
 8000838:	430a      	orrs	r2, r1
 800083a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800083c:	2000      	movs	r0, #0
 800083e:	f000 f809 	bl	8000854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000842:	f7ff fe8f 	bl	8000564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000846:	2300      	movs	r3, #0
}
 8000848:	0018      	movs	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	40022000 	.word	0x40022000

08000854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <HAL_InitTick+0x5c>)
 800085e:	681c      	ldr	r4, [r3, #0]
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_InitTick+0x60>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	0019      	movs	r1, r3
 8000866:	23fa      	movs	r3, #250	; 0xfa
 8000868:	0098      	lsls	r0, r3, #2
 800086a:	f7ff fc4d 	bl	8000108 <__udivsi3>
 800086e:	0003      	movs	r3, r0
 8000870:	0019      	movs	r1, r3
 8000872:	0020      	movs	r0, r4
 8000874:	f7ff fc48 	bl	8000108 <__udivsi3>
 8000878:	0003      	movs	r3, r0
 800087a:	0018      	movs	r0, r3
 800087c:	f000 f92f 	bl	8000ade <HAL_SYSTICK_Config>
 8000880:	1e03      	subs	r3, r0, #0
 8000882:	d001      	beq.n	8000888 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000884:	2301      	movs	r3, #1
 8000886:	e00f      	b.n	80008a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b03      	cmp	r3, #3
 800088c:	d80b      	bhi.n	80008a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	2301      	movs	r3, #1
 8000892:	425b      	negs	r3, r3
 8000894:	2200      	movs	r2, #0
 8000896:	0018      	movs	r0, r3
 8000898:	f000 f8fc 	bl	8000a94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_InitTick+0x64>)
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e000      	b.n	80008a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	0018      	movs	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b003      	add	sp, #12
 80008ae:	bd90      	pop	{r4, r7, pc}
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000008 	.word	0x20000008
 80008b8:	20000004 	.word	0x20000004

080008bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <HAL_IncTick+0x1c>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	001a      	movs	r2, r3
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <HAL_IncTick+0x20>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	18d2      	adds	r2, r2, r3
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <HAL_IncTick+0x20>)
 80008ce:	601a      	str	r2, [r3, #0]
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	20000008 	.word	0x20000008
 80008dc:	200000cc 	.word	0x200000cc

080008e0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  return uwTick;
 80008e4:	4b02      	ldr	r3, [pc, #8]	; (80008f0 <HAL_GetTick+0x10>)
 80008e6:	681b      	ldr	r3, [r3, #0]
}
 80008e8:	0018      	movs	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	200000cc 	.word	0x200000cc

080008f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008fc:	f7ff fff0 	bl	80008e0 <HAL_GetTick>
 8000900:	0003      	movs	r3, r0
 8000902:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3301      	adds	r3, #1
 800090c:	d005      	beq.n	800091a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <HAL_Delay+0x44>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	001a      	movs	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	189b      	adds	r3, r3, r2
 8000918:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	f7ff ffe0 	bl	80008e0 <HAL_GetTick>
 8000920:	0002      	movs	r2, r0
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	429a      	cmp	r2, r3
 800092a:	d8f7      	bhi.n	800091c <HAL_Delay+0x28>
  {
  }
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b004      	add	sp, #16
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	20000008 	.word	0x20000008

0800093c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	0002      	movs	r2, r0
 8000944:	1dfb      	adds	r3, r7, #7
 8000946:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b7f      	cmp	r3, #127	; 0x7f
 800094e:	d809      	bhi.n	8000964 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	001a      	movs	r2, r3
 8000956:	231f      	movs	r3, #31
 8000958:	401a      	ands	r2, r3
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <__NVIC_EnableIRQ+0x30>)
 800095c:	2101      	movs	r1, #1
 800095e:	4091      	lsls	r1, r2
 8000960:	000a      	movs	r2, r1
 8000962:	601a      	str	r2, [r3, #0]
  }
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b002      	add	sp, #8
 800096a:	bd80      	pop	{r7, pc}
 800096c:	e000e100 	.word	0xe000e100

08000970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	0002      	movs	r2, r0
 8000978:	6039      	str	r1, [r7, #0]
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b7f      	cmp	r3, #127	; 0x7f
 8000984:	d828      	bhi.n	80009d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000986:	4a2f      	ldr	r2, [pc, #188]	; (8000a44 <__NVIC_SetPriority+0xd4>)
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	b25b      	sxtb	r3, r3
 800098e:	089b      	lsrs	r3, r3, #2
 8000990:	33c0      	adds	r3, #192	; 0xc0
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	589b      	ldr	r3, [r3, r2]
 8000996:	1dfa      	adds	r2, r7, #7
 8000998:	7812      	ldrb	r2, [r2, #0]
 800099a:	0011      	movs	r1, r2
 800099c:	2203      	movs	r2, #3
 800099e:	400a      	ands	r2, r1
 80009a0:	00d2      	lsls	r2, r2, #3
 80009a2:	21ff      	movs	r1, #255	; 0xff
 80009a4:	4091      	lsls	r1, r2
 80009a6:	000a      	movs	r2, r1
 80009a8:	43d2      	mvns	r2, r2
 80009aa:	401a      	ands	r2, r3
 80009ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	019b      	lsls	r3, r3, #6
 80009b2:	22ff      	movs	r2, #255	; 0xff
 80009b4:	401a      	ands	r2, r3
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	0018      	movs	r0, r3
 80009bc:	2303      	movs	r3, #3
 80009be:	4003      	ands	r3, r0
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c4:	481f      	ldr	r0, [pc, #124]	; (8000a44 <__NVIC_SetPriority+0xd4>)
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b25b      	sxtb	r3, r3
 80009cc:	089b      	lsrs	r3, r3, #2
 80009ce:	430a      	orrs	r2, r1
 80009d0:	33c0      	adds	r3, #192	; 0xc0
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009d6:	e031      	b.n	8000a3c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d8:	4a1b      	ldr	r2, [pc, #108]	; (8000a48 <__NVIC_SetPriority+0xd8>)
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	0019      	movs	r1, r3
 80009e0:	230f      	movs	r3, #15
 80009e2:	400b      	ands	r3, r1
 80009e4:	3b08      	subs	r3, #8
 80009e6:	089b      	lsrs	r3, r3, #2
 80009e8:	3306      	adds	r3, #6
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	18d3      	adds	r3, r2, r3
 80009ee:	3304      	adds	r3, #4
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	1dfa      	adds	r2, r7, #7
 80009f4:	7812      	ldrb	r2, [r2, #0]
 80009f6:	0011      	movs	r1, r2
 80009f8:	2203      	movs	r2, #3
 80009fa:	400a      	ands	r2, r1
 80009fc:	00d2      	lsls	r2, r2, #3
 80009fe:	21ff      	movs	r1, #255	; 0xff
 8000a00:	4091      	lsls	r1, r2
 8000a02:	000a      	movs	r2, r1
 8000a04:	43d2      	mvns	r2, r2
 8000a06:	401a      	ands	r2, r3
 8000a08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	019b      	lsls	r3, r3, #6
 8000a0e:	22ff      	movs	r2, #255	; 0xff
 8000a10:	401a      	ands	r2, r3
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	0018      	movs	r0, r3
 8000a18:	2303      	movs	r3, #3
 8000a1a:	4003      	ands	r3, r0
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <__NVIC_SetPriority+0xd8>)
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	001c      	movs	r4, r3
 8000a28:	230f      	movs	r3, #15
 8000a2a:	4023      	ands	r3, r4
 8000a2c:	3b08      	subs	r3, #8
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	430a      	orrs	r2, r1
 8000a32:	3306      	adds	r3, #6
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	18c3      	adds	r3, r0, r3
 8000a38:	3304      	adds	r3, #4
 8000a3a:	601a      	str	r2, [r3, #0]
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b003      	add	sp, #12
 8000a42:	bd90      	pop	{r4, r7, pc}
 8000a44:	e000e100 	.word	0xe000e100
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	1e5a      	subs	r2, r3, #1
 8000a58:	2380      	movs	r3, #128	; 0x80
 8000a5a:	045b      	lsls	r3, r3, #17
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d301      	bcc.n	8000a64 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a60:	2301      	movs	r3, #1
 8000a62:	e010      	b.n	8000a86 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <SysTick_Config+0x44>)
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	425b      	negs	r3, r3
 8000a70:	2103      	movs	r1, #3
 8000a72:	0018      	movs	r0, r3
 8000a74:	f7ff ff7c 	bl	8000970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <SysTick_Config+0x44>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7e:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <SysTick_Config+0x44>)
 8000a80:	2207      	movs	r2, #7
 8000a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	0018      	movs	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b002      	add	sp, #8
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	e000e010 	.word	0xe000e010

08000a94 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	1c02      	adds	r2, r0, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b25b      	sxtb	r3, r3
 8000aae:	0011      	movs	r1, r2
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f7ff ff5d 	bl	8000970 <__NVIC_SetPriority>
}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b004      	add	sp, #16
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	0002      	movs	r2, r0
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	b25b      	sxtb	r3, r3
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f7ff ff33 	bl	800093c <__NVIC_EnableIRQ>
}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b002      	add	sp, #8
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff ffaf 	bl	8000a4c <SysTick_Config>
 8000aee:	0003      	movs	r3, r0
}
 8000af0:	0018      	movs	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b002      	add	sp, #8
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2221      	movs	r2, #33	; 0x21
 8000b04:	5c9b      	ldrb	r3, [r3, r2]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d008      	beq.n	8000b1e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2204      	movs	r2, #4
 8000b10:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2220      	movs	r2, #32
 8000b16:	2100      	movs	r1, #0
 8000b18:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e020      	b.n	8000b60 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	210e      	movs	r1, #14
 8000b2a:	438a      	bics	r2, r1
 8000b2c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2101      	movs	r1, #1
 8000b3a:	438a      	bics	r2, r1
 8000b3c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b46:	2101      	movs	r1, #1
 8000b48:	4091      	lsls	r1, r2
 8000b4a:	000a      	movs	r2, r1
 8000b4c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2221      	movs	r2, #33	; 0x21
 8000b52:	2101      	movs	r1, #1
 8000b54:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2220      	movs	r2, #32
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000b5e:	2300      	movs	r3, #0
}
 8000b60:	0018      	movs	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b70:	210f      	movs	r1, #15
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2221      	movs	r2, #33	; 0x21
 8000b7c:	5c9b      	ldrb	r3, [r3, r2]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d006      	beq.n	8000b92 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2204      	movs	r2, #4
 8000b88:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	e028      	b.n	8000be4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	210e      	movs	r1, #14
 8000b9e:	438a      	bics	r2, r1
 8000ba0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2101      	movs	r1, #1
 8000bae:	438a      	bics	r2, r1
 8000bb0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4091      	lsls	r1, r2
 8000bbe:	000a      	movs	r2, r1
 8000bc0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2221      	movs	r2, #33	; 0x21
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2220      	movs	r2, #32
 8000bce:	2100      	movs	r1, #0
 8000bd0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d004      	beq.n	8000be4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	0010      	movs	r0, r2
 8000be2:	4798      	blx	r3
    } 
  }
  return status;
 8000be4:	230f      	movs	r3, #15
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	781b      	ldrb	r3, [r3, #0]
}
 8000bea:	0018      	movs	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b004      	add	sp, #16
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c02:	e14f      	b.n	8000ea4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2101      	movs	r1, #1
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	000a      	movs	r2, r1
 8000c10:	4013      	ands	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d100      	bne.n	8000c1c <HAL_GPIO_Init+0x28>
 8000c1a:	e140      	b.n	8000e9e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d00b      	beq.n	8000c3c <HAL_GPIO_Init+0x48>
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d007      	beq.n	8000c3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c30:	2b11      	cmp	r3, #17
 8000c32:	d003      	beq.n	8000c3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	2b12      	cmp	r3, #18
 8000c3a:	d130      	bne.n	8000c9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	2203      	movs	r2, #3
 8000c48:	409a      	lsls	r2, r3
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	43da      	mvns	r2, r3
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	68da      	ldr	r2, [r3, #12]
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	409a      	lsls	r2, r3
 8000c5e:	0013      	movs	r3, r2
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c72:	2201      	movs	r2, #1
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	409a      	lsls	r2, r3
 8000c78:	0013      	movs	r3, r2
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	091b      	lsrs	r3, r3, #4
 8000c88:	2201      	movs	r2, #1
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
 8000c90:	0013      	movs	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	409a      	lsls	r2, r3
 8000cac:	0013      	movs	r3, r2
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_Init+0xea>
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b12      	cmp	r3, #18
 8000cdc:	d123      	bne.n	8000d26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	08da      	lsrs	r2, r3, #3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3208      	adds	r2, #8
 8000ce6:	0092      	lsls	r2, r2, #2
 8000ce8:	58d3      	ldr	r3, [r2, r3]
 8000cea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	2207      	movs	r2, #7
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	220f      	movs	r2, #15
 8000cf6:	409a      	lsls	r2, r3
 8000cf8:	0013      	movs	r3, r2
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	691a      	ldr	r2, [r3, #16]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	2107      	movs	r1, #7
 8000d0a:	400b      	ands	r3, r1
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	0013      	movs	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	08da      	lsrs	r2, r3, #3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3208      	adds	r2, #8
 8000d20:	0092      	lsls	r2, r2, #2
 8000d22:	6939      	ldr	r1, [r7, #16]
 8000d24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	2203      	movs	r2, #3
 8000d32:	409a      	lsls	r2, r3
 8000d34:	0013      	movs	r3, r2
 8000d36:	43da      	mvns	r2, r3
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2203      	movs	r2, #3
 8000d44:	401a      	ands	r2, r3
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	055b      	lsls	r3, r3, #21
 8000d62:	4013      	ands	r3, r2
 8000d64:	d100      	bne.n	8000d68 <HAL_GPIO_Init+0x174>
 8000d66:	e09a      	b.n	8000e9e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d68:	4b54      	ldr	r3, [pc, #336]	; (8000ebc <HAL_GPIO_Init+0x2c8>)
 8000d6a:	699a      	ldr	r2, [r3, #24]
 8000d6c:	4b53      	ldr	r3, [pc, #332]	; (8000ebc <HAL_GPIO_Init+0x2c8>)
 8000d6e:	2101      	movs	r1, #1
 8000d70:	430a      	orrs	r2, r1
 8000d72:	619a      	str	r2, [r3, #24]
 8000d74:	4b51      	ldr	r3, [pc, #324]	; (8000ebc <HAL_GPIO_Init+0x2c8>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d80:	4a4f      	ldr	r2, [pc, #316]	; (8000ec0 <HAL_GPIO_Init+0x2cc>)
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	089b      	lsrs	r3, r3, #2
 8000d86:	3302      	adds	r3, #2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	589b      	ldr	r3, [r3, r2]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	2203      	movs	r2, #3
 8000d92:	4013      	ands	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	220f      	movs	r2, #15
 8000d98:	409a      	lsls	r2, r3
 8000d9a:	0013      	movs	r3, r2
 8000d9c:	43da      	mvns	r2, r3
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	2390      	movs	r3, #144	; 0x90
 8000da8:	05db      	lsls	r3, r3, #23
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d013      	beq.n	8000dd6 <HAL_GPIO_Init+0x1e2>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a44      	ldr	r2, [pc, #272]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d00d      	beq.n	8000dd2 <HAL_GPIO_Init+0x1de>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a43      	ldr	r2, [pc, #268]	; (8000ec8 <HAL_GPIO_Init+0x2d4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d007      	beq.n	8000dce <HAL_GPIO_Init+0x1da>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a42      	ldr	r2, [pc, #264]	; (8000ecc <HAL_GPIO_Init+0x2d8>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d101      	bne.n	8000dca <HAL_GPIO_Init+0x1d6>
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_Init+0x1e4>
 8000dca:	2305      	movs	r3, #5
 8000dcc:	e004      	b.n	8000dd8 <HAL_GPIO_Init+0x1e4>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e002      	b.n	8000dd8 <HAL_GPIO_Init+0x1e4>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <HAL_GPIO_Init+0x1e4>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	2103      	movs	r1, #3
 8000ddc:	400a      	ands	r2, r1
 8000dde:	0092      	lsls	r2, r2, #2
 8000de0:	4093      	lsls	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000de8:	4935      	ldr	r1, [pc, #212]	; (8000ec0 <HAL_GPIO_Init+0x2cc>)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	3302      	adds	r3, #2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df6:	4b36      	ldr	r3, [pc, #216]	; (8000ed0 <HAL_GPIO_Init+0x2dc>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	2380      	movs	r3, #128	; 0x80
 8000e0c:	025b      	lsls	r3, r3, #9
 8000e0e:	4013      	ands	r3, r2
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ed0 <HAL_GPIO_Init+0x2dc>)
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e20:	4b2b      	ldr	r3, [pc, #172]	; (8000ed0 <HAL_GPIO_Init+0x2dc>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	43da      	mvns	r2, r3
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	029b      	lsls	r3, r3, #10
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <HAL_GPIO_Init+0x2dc>)
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <HAL_GPIO_Init+0x2dc>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	43da      	mvns	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	035b      	lsls	r3, r3, #13
 8000e62:	4013      	ands	r3, r2
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_GPIO_Init+0x2dc>)
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <HAL_GPIO_Init+0x2dc>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	43da      	mvns	r2, r3
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	039b      	lsls	r3, r3, #14
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <HAL_GPIO_Init+0x2dc>)
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	40da      	lsrs	r2, r3
 8000eac:	1e13      	subs	r3, r2, #0
 8000eae:	d000      	beq.n	8000eb2 <HAL_GPIO_Init+0x2be>
 8000eb0:	e6a8      	b.n	8000c04 <HAL_GPIO_Init+0x10>
  } 
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b006      	add	sp, #24
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010000 	.word	0x40010000
 8000ec4:	48000400 	.word	0x48000400
 8000ec8:	48000800 	.word	0x48000800
 8000ecc:	48000c00 	.word	0x48000c00
 8000ed0:	40010400 	.word	0x40010400

08000ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	0008      	movs	r0, r1
 8000ede:	0011      	movs	r1, r2
 8000ee0:	1cbb      	adds	r3, r7, #2
 8000ee2:	1c02      	adds	r2, r0, #0
 8000ee4:	801a      	strh	r2, [r3, #0]
 8000ee6:	1c7b      	adds	r3, r7, #1
 8000ee8:	1c0a      	adds	r2, r1, #0
 8000eea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eec:	1c7b      	adds	r3, r7, #1
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d004      	beq.n	8000efe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ef4:	1cbb      	adds	r3, r7, #2
 8000ef6:	881a      	ldrh	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000efc:	e003      	b.n	8000f06 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000efe:	1cbb      	adds	r3, r7, #2
 8000f00:	881a      	ldrh	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b002      	add	sp, #8
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b084      	sub	sp, #16
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	000a      	movs	r2, r1
 8000f18:	1cbb      	adds	r3, r7, #2
 8000f1a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f22:	1cbb      	adds	r3, r7, #2
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	041a      	lsls	r2, r3, #16
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	1cb9      	adds	r1, r7, #2
 8000f32:	8809      	ldrh	r1, [r1, #0]
 8000f34:	400b      	ands	r3, r1
 8000f36:	431a      	orrs	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	619a      	str	r2, [r3, #24]
}
 8000f3c:	46c0      	nop			; (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b004      	add	sp, #16
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	0002      	movs	r2, r0
 8000f4c:	1dbb      	adds	r3, r7, #6
 8000f4e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	1dba      	adds	r2, r7, #6
 8000f56:	8812      	ldrh	r2, [r2, #0]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d008      	beq.n	8000f6e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f5e:	1dba      	adds	r2, r7, #6
 8000f60:	8812      	ldrh	r2, [r2, #0]
 8000f62:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f64:	1dbb      	adds	r3, r7, #6
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f000 f807 	bl	8000f7c <HAL_GPIO_EXTI_Callback>
  }
}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b002      	add	sp, #8
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	40010400 	.word	0x40010400

08000f7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	0002      	movs	r2, r0
 8000f84:	1dbb      	adds	r3, r7, #6
 8000f86:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b002      	add	sp, #8
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e301      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d100      	bne.n	8000fae <HAL_RCC_OscConfig+0x1e>
 8000fac:	e08d      	b.n	80010ca <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fae:	4bc3      	ldr	r3, [pc, #780]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d00e      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fba:	4bc0      	ldr	r3, [pc, #768]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d116      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x64>
 8000fc6:	4bbd      	ldr	r3, [pc, #756]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	025b      	lsls	r3, r3, #9
 8000fce:	401a      	ands	r2, r3
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	025b      	lsls	r3, r3, #9
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d10d      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd8:	4bb8      	ldr	r3, [pc, #736]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	029b      	lsls	r3, r3, #10
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d100      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x56>
 8000fe4:	e070      	b.n	80010c8 <HAL_RCC_OscConfig+0x138>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d000      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x60>
 8000fee:	e06b      	b.n	80010c8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e2d8      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d107      	bne.n	800100c <HAL_RCC_OscConfig+0x7c>
 8000ffc:	4baf      	ldr	r3, [pc, #700]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4bae      	ldr	r3, [pc, #696]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001002:	2180      	movs	r1, #128	; 0x80
 8001004:	0249      	lsls	r1, r1, #9
 8001006:	430a      	orrs	r2, r1
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	e02f      	b.n	800106c <HAL_RCC_OscConfig+0xdc>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10c      	bne.n	800102e <HAL_RCC_OscConfig+0x9e>
 8001014:	4ba9      	ldr	r3, [pc, #676]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4ba8      	ldr	r3, [pc, #672]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 800101a:	49a9      	ldr	r1, [pc, #676]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 800101c:	400a      	ands	r2, r1
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	4ba6      	ldr	r3, [pc, #664]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4ba5      	ldr	r3, [pc, #660]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001026:	49a7      	ldr	r1, [pc, #668]	; (80012c4 <HAL_RCC_OscConfig+0x334>)
 8001028:	400a      	ands	r2, r1
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	e01e      	b.n	800106c <HAL_RCC_OscConfig+0xdc>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b05      	cmp	r3, #5
 8001034:	d10e      	bne.n	8001054 <HAL_RCC_OscConfig+0xc4>
 8001036:	4ba1      	ldr	r3, [pc, #644]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4ba0      	ldr	r3, [pc, #640]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 800103c:	2180      	movs	r1, #128	; 0x80
 800103e:	02c9      	lsls	r1, r1, #11
 8001040:	430a      	orrs	r2, r1
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	4b9d      	ldr	r3, [pc, #628]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b9c      	ldr	r3, [pc, #624]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 800104a:	2180      	movs	r1, #128	; 0x80
 800104c:	0249      	lsls	r1, r1, #9
 800104e:	430a      	orrs	r2, r1
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	e00b      	b.n	800106c <HAL_RCC_OscConfig+0xdc>
 8001054:	4b99      	ldr	r3, [pc, #612]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b98      	ldr	r3, [pc, #608]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 800105a:	4999      	ldr	r1, [pc, #612]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 800105c:	400a      	ands	r2, r1
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	4b96      	ldr	r3, [pc, #600]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b95      	ldr	r3, [pc, #596]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001066:	4997      	ldr	r1, [pc, #604]	; (80012c4 <HAL_RCC_OscConfig+0x334>)
 8001068:	400a      	ands	r2, r1
 800106a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d014      	beq.n	800109e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fc34 	bl	80008e0 <HAL_GetTick>
 8001078:	0003      	movs	r3, r0
 800107a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800107e:	f7ff fc2f 	bl	80008e0 <HAL_GetTick>
 8001082:	0002      	movs	r2, r0
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b64      	cmp	r3, #100	; 0x64
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e28a      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001090:	4b8a      	ldr	r3, [pc, #552]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	029b      	lsls	r3, r3, #10
 8001098:	4013      	ands	r3, r2
 800109a:	d0f0      	beq.n	800107e <HAL_RCC_OscConfig+0xee>
 800109c:	e015      	b.n	80010ca <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109e:	f7ff fc1f 	bl	80008e0 <HAL_GetTick>
 80010a2:	0003      	movs	r3, r0
 80010a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a8:	f7ff fc1a 	bl	80008e0 <HAL_GetTick>
 80010ac:	0002      	movs	r2, r0
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b64      	cmp	r3, #100	; 0x64
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e275      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ba:	4b80      	ldr	r3, [pc, #512]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	029b      	lsls	r3, r3, #10
 80010c2:	4013      	ands	r3, r2
 80010c4:	d1f0      	bne.n	80010a8 <HAL_RCC_OscConfig+0x118>
 80010c6:	e000      	b.n	80010ca <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2202      	movs	r2, #2
 80010d0:	4013      	ands	r3, r2
 80010d2:	d100      	bne.n	80010d6 <HAL_RCC_OscConfig+0x146>
 80010d4:	e069      	b.n	80011aa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010d6:	4b79      	ldr	r3, [pc, #484]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	220c      	movs	r2, #12
 80010dc:	4013      	ands	r3, r2
 80010de:	d00b      	beq.n	80010f8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010e0:	4b76      	ldr	r3, [pc, #472]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	220c      	movs	r2, #12
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d11c      	bne.n	8001126 <HAL_RCC_OscConfig+0x196>
 80010ec:	4b73      	ldr	r3, [pc, #460]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	025b      	lsls	r3, r3, #9
 80010f4:	4013      	ands	r3, r2
 80010f6:	d116      	bne.n	8001126 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f8:	4b70      	ldr	r3, [pc, #448]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2202      	movs	r2, #2
 80010fe:	4013      	ands	r3, r2
 8001100:	d005      	beq.n	800110e <HAL_RCC_OscConfig+0x17e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d001      	beq.n	800110e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e24b      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110e:	4b6b      	ldr	r3, [pc, #428]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	22f8      	movs	r2, #248	; 0xf8
 8001114:	4393      	bics	r3, r2
 8001116:	0019      	movs	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	00da      	lsls	r2, r3, #3
 800111e:	4b67      	ldr	r3, [pc, #412]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001120:	430a      	orrs	r2, r1
 8001122:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001124:	e041      	b.n	80011aa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d024      	beq.n	8001178 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800112e:	4b63      	ldr	r3, [pc, #396]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b62      	ldr	r3, [pc, #392]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001134:	2101      	movs	r1, #1
 8001136:	430a      	orrs	r2, r1
 8001138:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113a:	f7ff fbd1 	bl	80008e0 <HAL_GetTick>
 800113e:	0003      	movs	r3, r0
 8001140:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001144:	f7ff fbcc 	bl	80008e0 <HAL_GetTick>
 8001148:	0002      	movs	r2, r0
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e227      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001156:	4b59      	ldr	r3, [pc, #356]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2202      	movs	r2, #2
 800115c:	4013      	ands	r3, r2
 800115e:	d0f1      	beq.n	8001144 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001160:	4b56      	ldr	r3, [pc, #344]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	22f8      	movs	r2, #248	; 0xf8
 8001166:	4393      	bics	r3, r2
 8001168:	0019      	movs	r1, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	00da      	lsls	r2, r3, #3
 8001170:	4b52      	ldr	r3, [pc, #328]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001172:	430a      	orrs	r2, r1
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e018      	b.n	80011aa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001178:	4b50      	ldr	r3, [pc, #320]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b4f      	ldr	r3, [pc, #316]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 800117e:	2101      	movs	r1, #1
 8001180:	438a      	bics	r2, r1
 8001182:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fbac 	bl	80008e0 <HAL_GetTick>
 8001188:	0003      	movs	r3, r0
 800118a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800118e:	f7ff fba7 	bl	80008e0 <HAL_GetTick>
 8001192:	0002      	movs	r2, r0
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e202      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011a0:	4b46      	ldr	r3, [pc, #280]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2202      	movs	r2, #2
 80011a6:	4013      	ands	r3, r2
 80011a8:	d1f1      	bne.n	800118e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2208      	movs	r2, #8
 80011b0:	4013      	ands	r3, r2
 80011b2:	d036      	beq.n	8001222 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d019      	beq.n	80011f0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011bc:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80011be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011c0:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80011c2:	2101      	movs	r1, #1
 80011c4:	430a      	orrs	r2, r1
 80011c6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c8:	f7ff fb8a 	bl	80008e0 <HAL_GetTick>
 80011cc:	0003      	movs	r3, r0
 80011ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d2:	f7ff fb85 	bl	80008e0 <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e1e0      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011e4:	4b35      	ldr	r3, [pc, #212]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	2202      	movs	r2, #2
 80011ea:	4013      	ands	r3, r2
 80011ec:	d0f1      	beq.n	80011d2 <HAL_RCC_OscConfig+0x242>
 80011ee:	e018      	b.n	8001222 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011f0:	4b32      	ldr	r3, [pc, #200]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80011f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011f4:	4b31      	ldr	r3, [pc, #196]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80011f6:	2101      	movs	r1, #1
 80011f8:	438a      	bics	r2, r1
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fc:	f7ff fb70 	bl	80008e0 <HAL_GetTick>
 8001200:	0003      	movs	r3, r0
 8001202:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001206:	f7ff fb6b 	bl	80008e0 <HAL_GetTick>
 800120a:	0002      	movs	r2, r0
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e1c6      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001218:	4b28      	ldr	r3, [pc, #160]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	2202      	movs	r2, #2
 800121e:	4013      	ands	r3, r2
 8001220:	d1f1      	bne.n	8001206 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2204      	movs	r2, #4
 8001228:	4013      	ands	r3, r2
 800122a:	d100      	bne.n	800122e <HAL_RCC_OscConfig+0x29e>
 800122c:	e0b4      	b.n	8001398 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800122e:	201f      	movs	r0, #31
 8001230:	183b      	adds	r3, r7, r0
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001238:	69da      	ldr	r2, [r3, #28]
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	055b      	lsls	r3, r3, #21
 800123e:	4013      	ands	r3, r2
 8001240:	d110      	bne.n	8001264 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001244:	69da      	ldr	r2, [r3, #28]
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001248:	2180      	movs	r1, #128	; 0x80
 800124a:	0549      	lsls	r1, r1, #21
 800124c:	430a      	orrs	r2, r1
 800124e:	61da      	str	r2, [r3, #28]
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001252:	69da      	ldr	r2, [r3, #28]
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	055b      	lsls	r3, r3, #21
 8001258:	4013      	ands	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800125e:	183b      	adds	r3, r7, r0
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_RCC_OscConfig+0x338>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4013      	ands	r3, r2
 800126e:	d11a      	bne.n	80012a6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_RCC_OscConfig+0x338>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_RCC_OscConfig+0x338>)
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	0049      	lsls	r1, r1, #1
 800127a:	430a      	orrs	r2, r1
 800127c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800127e:	f7ff fb2f 	bl	80008e0 <HAL_GetTick>
 8001282:	0003      	movs	r3, r0
 8001284:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001288:	f7ff fb2a 	bl	80008e0 <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	; 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e185      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_RCC_OscConfig+0x338>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4013      	ands	r3, r2
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d10e      	bne.n	80012cc <HAL_RCC_OscConfig+0x33c>
 80012ae:	4b03      	ldr	r3, [pc, #12]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80012b0:	6a1a      	ldr	r2, [r3, #32]
 80012b2:	4b02      	ldr	r3, [pc, #8]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80012b4:	2101      	movs	r1, #1
 80012b6:	430a      	orrs	r2, r1
 80012b8:	621a      	str	r2, [r3, #32]
 80012ba:	e035      	b.n	8001328 <HAL_RCC_OscConfig+0x398>
 80012bc:	40021000 	.word	0x40021000
 80012c0:	fffeffff 	.word	0xfffeffff
 80012c4:	fffbffff 	.word	0xfffbffff
 80012c8:	40007000 	.word	0x40007000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10c      	bne.n	80012ee <HAL_RCC_OscConfig+0x35e>
 80012d4:	4bb6      	ldr	r3, [pc, #728]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80012d6:	6a1a      	ldr	r2, [r3, #32]
 80012d8:	4bb5      	ldr	r3, [pc, #724]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80012da:	2101      	movs	r1, #1
 80012dc:	438a      	bics	r2, r1
 80012de:	621a      	str	r2, [r3, #32]
 80012e0:	4bb3      	ldr	r3, [pc, #716]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80012e2:	6a1a      	ldr	r2, [r3, #32]
 80012e4:	4bb2      	ldr	r3, [pc, #712]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80012e6:	2104      	movs	r1, #4
 80012e8:	438a      	bics	r2, r1
 80012ea:	621a      	str	r2, [r3, #32]
 80012ec:	e01c      	b.n	8001328 <HAL_RCC_OscConfig+0x398>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	d10c      	bne.n	8001310 <HAL_RCC_OscConfig+0x380>
 80012f6:	4bae      	ldr	r3, [pc, #696]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80012f8:	6a1a      	ldr	r2, [r3, #32]
 80012fa:	4bad      	ldr	r3, [pc, #692]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80012fc:	2104      	movs	r1, #4
 80012fe:	430a      	orrs	r2, r1
 8001300:	621a      	str	r2, [r3, #32]
 8001302:	4bab      	ldr	r3, [pc, #684]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001304:	6a1a      	ldr	r2, [r3, #32]
 8001306:	4baa      	ldr	r3, [pc, #680]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001308:	2101      	movs	r1, #1
 800130a:	430a      	orrs	r2, r1
 800130c:	621a      	str	r2, [r3, #32]
 800130e:	e00b      	b.n	8001328 <HAL_RCC_OscConfig+0x398>
 8001310:	4ba7      	ldr	r3, [pc, #668]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001312:	6a1a      	ldr	r2, [r3, #32]
 8001314:	4ba6      	ldr	r3, [pc, #664]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001316:	2101      	movs	r1, #1
 8001318:	438a      	bics	r2, r1
 800131a:	621a      	str	r2, [r3, #32]
 800131c:	4ba4      	ldr	r3, [pc, #656]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800131e:	6a1a      	ldr	r2, [r3, #32]
 8001320:	4ba3      	ldr	r3, [pc, #652]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001322:	2104      	movs	r1, #4
 8001324:	438a      	bics	r2, r1
 8001326:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d014      	beq.n	800135a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001330:	f7ff fad6 	bl	80008e0 <HAL_GetTick>
 8001334:	0003      	movs	r3, r0
 8001336:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001338:	e009      	b.n	800134e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800133a:	f7ff fad1 	bl	80008e0 <HAL_GetTick>
 800133e:	0002      	movs	r2, r0
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	4a9b      	ldr	r2, [pc, #620]	; (80015b4 <HAL_RCC_OscConfig+0x624>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e12b      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800134e:	4b98      	ldr	r3, [pc, #608]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	2202      	movs	r2, #2
 8001354:	4013      	ands	r3, r2
 8001356:	d0f0      	beq.n	800133a <HAL_RCC_OscConfig+0x3aa>
 8001358:	e013      	b.n	8001382 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135a:	f7ff fac1 	bl	80008e0 <HAL_GetTick>
 800135e:	0003      	movs	r3, r0
 8001360:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001362:	e009      	b.n	8001378 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001364:	f7ff fabc 	bl	80008e0 <HAL_GetTick>
 8001368:	0002      	movs	r2, r0
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	4a91      	ldr	r2, [pc, #580]	; (80015b4 <HAL_RCC_OscConfig+0x624>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e116      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001378:	4b8d      	ldr	r3, [pc, #564]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	2202      	movs	r2, #2
 800137e:	4013      	ands	r3, r2
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001382:	231f      	movs	r3, #31
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d105      	bne.n	8001398 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800138c:	4b88      	ldr	r3, [pc, #544]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800138e:	69da      	ldr	r2, [r3, #28]
 8001390:	4b87      	ldr	r3, [pc, #540]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001392:	4989      	ldr	r1, [pc, #548]	; (80015b8 <HAL_RCC_OscConfig+0x628>)
 8001394:	400a      	ands	r2, r1
 8001396:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2210      	movs	r2, #16
 800139e:	4013      	ands	r3, r2
 80013a0:	d063      	beq.n	800146a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d12a      	bne.n	8001400 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013aa:	4b81      	ldr	r3, [pc, #516]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ae:	4b80      	ldr	r3, [pc, #512]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013b0:	2104      	movs	r1, #4
 80013b2:	430a      	orrs	r2, r1
 80013b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80013b6:	4b7e      	ldr	r3, [pc, #504]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ba:	4b7d      	ldr	r3, [pc, #500]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013bc:	2101      	movs	r1, #1
 80013be:	430a      	orrs	r2, r1
 80013c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fa8d 	bl	80008e0 <HAL_GetTick>
 80013c6:	0003      	movs	r3, r0
 80013c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013cc:	f7ff fa88 	bl	80008e0 <HAL_GetTick>
 80013d0:	0002      	movs	r2, r0
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e0e3      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013de:	4b74      	ldr	r3, [pc, #464]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e2:	2202      	movs	r2, #2
 80013e4:	4013      	ands	r3, r2
 80013e6:	d0f1      	beq.n	80013cc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013e8:	4b71      	ldr	r3, [pc, #452]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ec:	22f8      	movs	r2, #248	; 0xf8
 80013ee:	4393      	bics	r3, r2
 80013f0:	0019      	movs	r1, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	00da      	lsls	r2, r3, #3
 80013f8:	4b6d      	ldr	r3, [pc, #436]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013fa:	430a      	orrs	r2, r1
 80013fc:	635a      	str	r2, [r3, #52]	; 0x34
 80013fe:	e034      	b.n	800146a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	3305      	adds	r3, #5
 8001406:	d111      	bne.n	800142c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001408:	4b69      	ldr	r3, [pc, #420]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800140a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800140c:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800140e:	2104      	movs	r1, #4
 8001410:	438a      	bics	r2, r1
 8001412:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001414:	4b66      	ldr	r3, [pc, #408]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001418:	22f8      	movs	r2, #248	; 0xf8
 800141a:	4393      	bics	r3, r2
 800141c:	0019      	movs	r1, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	00da      	lsls	r2, r3, #3
 8001424:	4b62      	ldr	r3, [pc, #392]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001426:	430a      	orrs	r2, r1
 8001428:	635a      	str	r2, [r3, #52]	; 0x34
 800142a:	e01e      	b.n	800146a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800142c:	4b60      	ldr	r3, [pc, #384]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800142e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001430:	4b5f      	ldr	r3, [pc, #380]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001432:	2104      	movs	r1, #4
 8001434:	430a      	orrs	r2, r1
 8001436:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001438:	4b5d      	ldr	r3, [pc, #372]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800143a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800143c:	4b5c      	ldr	r3, [pc, #368]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800143e:	2101      	movs	r1, #1
 8001440:	438a      	bics	r2, r1
 8001442:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001444:	f7ff fa4c 	bl	80008e0 <HAL_GetTick>
 8001448:	0003      	movs	r3, r0
 800144a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800144e:	f7ff fa47 	bl	80008e0 <HAL_GetTick>
 8001452:	0002      	movs	r2, r0
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e0a2      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001460:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001464:	2202      	movs	r2, #2
 8001466:	4013      	ands	r3, r2
 8001468:	d1f1      	bne.n	800144e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d100      	bne.n	8001474 <HAL_RCC_OscConfig+0x4e4>
 8001472:	e097      	b.n	80015a4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001474:	4b4e      	ldr	r3, [pc, #312]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	220c      	movs	r2, #12
 800147a:	4013      	ands	r3, r2
 800147c:	2b08      	cmp	r3, #8
 800147e:	d100      	bne.n	8001482 <HAL_RCC_OscConfig+0x4f2>
 8001480:	e06b      	b.n	800155a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d14c      	bne.n	8001524 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148a:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4b48      	ldr	r3, [pc, #288]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001490:	494a      	ldr	r1, [pc, #296]	; (80015bc <HAL_RCC_OscConfig+0x62c>)
 8001492:	400a      	ands	r2, r1
 8001494:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff fa23 	bl	80008e0 <HAL_GetTick>
 800149a:	0003      	movs	r3, r0
 800149c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff fa1e 	bl	80008e0 <HAL_GetTick>
 80014a4:	0002      	movs	r2, r0
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e079      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b2:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	049b      	lsls	r3, r3, #18
 80014ba:	4013      	ands	r3, r2
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014be:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	220f      	movs	r2, #15
 80014c4:	4393      	bics	r3, r2
 80014c6:	0019      	movs	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014cc:	4b38      	ldr	r3, [pc, #224]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014ce:	430a      	orrs	r2, r1
 80014d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80014d2:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4a3a      	ldr	r2, [pc, #232]	; (80015c0 <HAL_RCC_OscConfig+0x630>)
 80014d8:	4013      	ands	r3, r2
 80014da:	0019      	movs	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	431a      	orrs	r2, r3
 80014e6:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014e8:	430a      	orrs	r2, r1
 80014ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ec:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014f2:	2180      	movs	r1, #128	; 0x80
 80014f4:	0449      	lsls	r1, r1, #17
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff f9f1 	bl	80008e0 <HAL_GetTick>
 80014fe:	0003      	movs	r3, r0
 8001500:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001504:	f7ff f9ec 	bl	80008e0 <HAL_GetTick>
 8001508:	0002      	movs	r2, r0
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e047      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001516:	4b26      	ldr	r3, [pc, #152]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	049b      	lsls	r3, r3, #18
 800151e:	4013      	ands	r3, r2
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x574>
 8001522:	e03f      	b.n	80015a4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001524:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800152a:	4924      	ldr	r1, [pc, #144]	; (80015bc <HAL_RCC_OscConfig+0x62c>)
 800152c:	400a      	ands	r2, r1
 800152e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff f9d6 	bl	80008e0 <HAL_GetTick>
 8001534:	0003      	movs	r3, r0
 8001536:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153a:	f7ff f9d1 	bl	80008e0 <HAL_GetTick>
 800153e:	0002      	movs	r2, r0
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e02c      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	049b      	lsls	r3, r3, #18
 8001554:	4013      	ands	r3, r2
 8001556:	d1f0      	bne.n	800153a <HAL_RCC_OscConfig+0x5aa>
 8001558:	e024      	b.n	80015a4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d101      	bne.n	8001566 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e01f      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800156c:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	025b      	lsls	r3, r3, #9
 8001578:	401a      	ands	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	429a      	cmp	r2, r3
 8001580:	d10e      	bne.n	80015a0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	220f      	movs	r2, #15
 8001586:	401a      	ands	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800158c:	429a      	cmp	r2, r3
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	23f0      	movs	r3, #240	; 0xf0
 8001594:	039b      	lsls	r3, r3, #14
 8001596:	401a      	ands	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b008      	add	sp, #32
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	40021000 	.word	0x40021000
 80015b4:	00001388 	.word	0x00001388
 80015b8:	efffffff 	.word	0xefffffff
 80015bc:	feffffff 	.word	0xfeffffff
 80015c0:	ffc2ffff 	.word	0xffc2ffff

080015c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0b3      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d8:	4b5b      	ldr	r3, [pc, #364]	; (8001748 <HAL_RCC_ClockConfig+0x184>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2201      	movs	r2, #1
 80015de:	4013      	ands	r3, r2
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d911      	bls.n	800160a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e6:	4b58      	ldr	r3, [pc, #352]	; (8001748 <HAL_RCC_ClockConfig+0x184>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2201      	movs	r2, #1
 80015ec:	4393      	bics	r3, r2
 80015ee:	0019      	movs	r1, r3
 80015f0:	4b55      	ldr	r3, [pc, #340]	; (8001748 <HAL_RCC_ClockConfig+0x184>)
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <HAL_RCC_ClockConfig+0x184>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2201      	movs	r2, #1
 80015fe:	4013      	ands	r3, r2
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d001      	beq.n	800160a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e09a      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2202      	movs	r2, #2
 8001610:	4013      	ands	r3, r2
 8001612:	d015      	beq.n	8001640 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2204      	movs	r2, #4
 800161a:	4013      	ands	r3, r2
 800161c:	d006      	beq.n	800162c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800161e:	4b4b      	ldr	r3, [pc, #300]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	4b4a      	ldr	r3, [pc, #296]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 8001624:	21e0      	movs	r1, #224	; 0xe0
 8001626:	00c9      	lsls	r1, r1, #3
 8001628:	430a      	orrs	r2, r1
 800162a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800162c:	4b47      	ldr	r3, [pc, #284]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	22f0      	movs	r2, #240	; 0xf0
 8001632:	4393      	bics	r3, r2
 8001634:	0019      	movs	r1, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	4b44      	ldr	r3, [pc, #272]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 800163c:	430a      	orrs	r2, r1
 800163e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2201      	movs	r2, #1
 8001646:	4013      	ands	r3, r2
 8001648:	d040      	beq.n	80016cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	4b3e      	ldr	r3, [pc, #248]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	029b      	lsls	r3, r3, #10
 800165a:	4013      	ands	r3, r2
 800165c:	d114      	bne.n	8001688 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e06e      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d107      	bne.n	800167a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166a:	4b38      	ldr	r3, [pc, #224]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	049b      	lsls	r3, r3, #18
 8001672:	4013      	ands	r3, r2
 8001674:	d108      	bne.n	8001688 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e062      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167a:	4b34      	ldr	r3, [pc, #208]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2202      	movs	r2, #2
 8001680:	4013      	ands	r3, r2
 8001682:	d101      	bne.n	8001688 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e05b      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001688:	4b30      	ldr	r3, [pc, #192]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2203      	movs	r2, #3
 800168e:	4393      	bics	r3, r2
 8001690:	0019      	movs	r1, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	4b2d      	ldr	r3, [pc, #180]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 8001698:	430a      	orrs	r2, r1
 800169a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800169c:	f7ff f920 	bl	80008e0 <HAL_GetTick>
 80016a0:	0003      	movs	r3, r0
 80016a2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a4:	e009      	b.n	80016ba <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a6:	f7ff f91b 	bl	80008e0 <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	4a27      	ldr	r2, [pc, #156]	; (8001750 <HAL_RCC_ClockConfig+0x18c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e042      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ba:	4b24      	ldr	r3, [pc, #144]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	220c      	movs	r2, #12
 80016c0:	401a      	ands	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d1ec      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016cc:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <HAL_RCC_ClockConfig+0x184>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2201      	movs	r2, #1
 80016d2:	4013      	ands	r3, r2
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d211      	bcs.n	80016fe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_RCC_ClockConfig+0x184>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2201      	movs	r2, #1
 80016e0:	4393      	bics	r3, r2
 80016e2:	0019      	movs	r1, r3
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_RCC_ClockConfig+0x184>)
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <HAL_RCC_ClockConfig+0x184>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2201      	movs	r2, #1
 80016f2:	4013      	ands	r3, r2
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e020      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2204      	movs	r2, #4
 8001704:	4013      	ands	r3, r2
 8001706:	d009      	beq.n	800171c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001708:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4a11      	ldr	r2, [pc, #68]	; (8001754 <HAL_RCC_ClockConfig+0x190>)
 800170e:	4013      	ands	r3, r2
 8001710:	0019      	movs	r1, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 8001718:	430a      	orrs	r2, r1
 800171a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800171c:	f000 f820 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 8001720:	0001      	movs	r1, r0
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	220f      	movs	r2, #15
 800172a:	4013      	ands	r3, r2
 800172c:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_RCC_ClockConfig+0x194>)
 800172e:	5cd3      	ldrb	r3, [r2, r3]
 8001730:	000a      	movs	r2, r1
 8001732:	40da      	lsrs	r2, r3
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_RCC_ClockConfig+0x198>)
 8001736:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001738:	2000      	movs	r0, #0
 800173a:	f7ff f88b 	bl	8000854 <HAL_InitTick>
  
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b004      	add	sp, #16
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40022000 	.word	0x40022000
 800174c:	40021000 	.word	0x40021000
 8001750:	00001388 	.word	0x00001388
 8001754:	fffff8ff 	.word	0xfffff8ff
 8001758:	0800255c 	.word	0x0800255c
 800175c:	20000000 	.word	0x20000000

08001760 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b08f      	sub	sp, #60	; 0x3c
 8001764:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001766:	2314      	movs	r3, #20
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	4a2b      	ldr	r2, [pc, #172]	; (8001818 <HAL_RCC_GetSysClockFreq+0xb8>)
 800176c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800176e:	c313      	stmia	r3!, {r0, r1, r4}
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	4a29      	ldr	r2, [pc, #164]	; (800181c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001778:	ca13      	ldmia	r2!, {r0, r1, r4}
 800177a:	c313      	stmia	r3!, {r0, r1, r4}
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
 8001788:	2300      	movs	r3, #0
 800178a:	637b      	str	r3, [r7, #52]	; 0x34
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001794:	4b22      	ldr	r3, [pc, #136]	; (8001820 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800179a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179c:	220c      	movs	r2, #12
 800179e:	4013      	ands	r3, r2
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d002      	beq.n	80017aa <HAL_RCC_GetSysClockFreq+0x4a>
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d003      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x50>
 80017a8:	e02d      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017aa:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <HAL_RCC_GetSysClockFreq+0xc4>)
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017ae:	e02d      	b.n	800180c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80017b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b2:	0c9b      	lsrs	r3, r3, #18
 80017b4:	220f      	movs	r2, #15
 80017b6:	4013      	ands	r3, r2
 80017b8:	2214      	movs	r2, #20
 80017ba:	18ba      	adds	r2, r7, r2
 80017bc:	5cd3      	ldrb	r3, [r2, r3]
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	220f      	movs	r2, #15
 80017c6:	4013      	ands	r3, r2
 80017c8:	1d3a      	adds	r2, r7, #4
 80017ca:	5cd3      	ldrb	r3, [r2, r3]
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80017ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	025b      	lsls	r3, r3, #9
 80017d4:	4013      	ands	r3, r2
 80017d6:	d009      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017da:	4812      	ldr	r0, [pc, #72]	; (8001824 <HAL_RCC_GetSysClockFreq+0xc4>)
 80017dc:	f7fe fc94 	bl	8000108 <__udivsi3>
 80017e0:	0003      	movs	r3, r0
 80017e2:	001a      	movs	r2, r3
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	4353      	muls	r3, r2
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
 80017ea:	e009      	b.n	8001800 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80017ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ee:	000a      	movs	r2, r1
 80017f0:	0152      	lsls	r2, r2, #5
 80017f2:	1a52      	subs	r2, r2, r1
 80017f4:	0193      	lsls	r3, r2, #6
 80017f6:	1a9b      	subs	r3, r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	185b      	adds	r3, r3, r1
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001804:	e002      	b.n	800180c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800180a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800180c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800180e:	0018      	movs	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	b00f      	add	sp, #60	; 0x3c
 8001814:	bd90      	pop	{r4, r7, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	0800253c 	.word	0x0800253c
 800181c:	0800254c 	.word	0x0800254c
 8001820:	40021000 	.word	0x40021000
 8001824:	007a1200 	.word	0x007a1200

08001828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800182c:	4b02      	ldr	r3, [pc, #8]	; (8001838 <HAL_RCC_GetHCLKFreq+0x10>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	0018      	movs	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	20000000 	.word	0x20000000

0800183c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001840:	f7ff fff2 	bl	8001828 <HAL_RCC_GetHCLKFreq>
 8001844:	0001      	movs	r1, r0
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	2207      	movs	r2, #7
 800184e:	4013      	ands	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001852:	5cd3      	ldrb	r3, [r2, r3]
 8001854:	40d9      	lsrs	r1, r3
 8001856:	000b      	movs	r3, r1
}    
 8001858:	0018      	movs	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	40021000 	.word	0x40021000
 8001864:	0800256c 	.word	0x0800256c

08001868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	025b      	lsls	r3, r3, #9
 8001880:	4013      	ands	r3, r2
 8001882:	d100      	bne.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001884:	e08e      	b.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001886:	2017      	movs	r0, #23
 8001888:	183b      	adds	r3, r7, r0
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188e:	4b57      	ldr	r3, [pc, #348]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001890:	69da      	ldr	r2, [r3, #28]
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	055b      	lsls	r3, r3, #21
 8001896:	4013      	ands	r3, r2
 8001898:	d110      	bne.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	4b54      	ldr	r3, [pc, #336]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800189c:	69da      	ldr	r2, [r3, #28]
 800189e:	4b53      	ldr	r3, [pc, #332]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	0549      	lsls	r1, r1, #21
 80018a4:	430a      	orrs	r2, r1
 80018a6:	61da      	str	r2, [r3, #28]
 80018a8:	4b50      	ldr	r3, [pc, #320]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018aa:	69da      	ldr	r2, [r3, #28]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	055b      	lsls	r3, r3, #21
 80018b0:	4013      	ands	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b6:	183b      	adds	r3, r7, r0
 80018b8:	2201      	movs	r2, #1
 80018ba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	4b4c      	ldr	r3, [pc, #304]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4013      	ands	r3, r2
 80018c6:	d11a      	bne.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c8:	4b49      	ldr	r3, [pc, #292]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b48      	ldr	r3, [pc, #288]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80018ce:	2180      	movs	r1, #128	; 0x80
 80018d0:	0049      	lsls	r1, r1, #1
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d6:	f7ff f803 	bl	80008e0 <HAL_GetTick>
 80018da:	0003      	movs	r3, r0
 80018dc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018de:	e008      	b.n	80018f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e0:	f7fe fffe 	bl	80008e0 <HAL_GetTick>
 80018e4:	0002      	movs	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e077      	b.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f2:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4013      	ands	r3, r2
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018fe:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001900:	6a1a      	ldr	r2, [r3, #32]
 8001902:	23c0      	movs	r3, #192	; 0xc0
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4013      	ands	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d034      	beq.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	23c0      	movs	r3, #192	; 0xc0
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4013      	ands	r3, r2
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d02c      	beq.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001920:	4b32      	ldr	r3, [pc, #200]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	4a33      	ldr	r2, [pc, #204]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001926:	4013      	ands	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800192a:	4b30      	ldr	r3, [pc, #192]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800192c:	6a1a      	ldr	r2, [r3, #32]
 800192e:	4b2f      	ldr	r3, [pc, #188]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	0249      	lsls	r1, r1, #9
 8001934:	430a      	orrs	r2, r1
 8001936:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001938:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800193a:	6a1a      	ldr	r2, [r3, #32]
 800193c:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800193e:	492e      	ldr	r1, [pc, #184]	; (80019f8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001940:	400a      	ands	r2, r1
 8001942:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001944:	4b29      	ldr	r3, [pc, #164]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2201      	movs	r2, #1
 800194e:	4013      	ands	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001952:	f7fe ffc5 	bl	80008e0 <HAL_GetTick>
 8001956:	0003      	movs	r3, r0
 8001958:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195a:	e009      	b.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195c:	f7fe ffc0 	bl	80008e0 <HAL_GetTick>
 8001960:	0002      	movs	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	4a25      	ldr	r2, [pc, #148]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d901      	bls.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e038      	b.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001970:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	2202      	movs	r2, #2
 8001976:	4013      	ands	r3, r2
 8001978:	d0f0      	beq.n	800195c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	4a1d      	ldr	r2, [pc, #116]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001980:	4013      	ands	r3, r2
 8001982:	0019      	movs	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	4b18      	ldr	r3, [pc, #96]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800198a:	430a      	orrs	r2, r1
 800198c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800198e:	2317      	movs	r3, #23
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800199a:	69da      	ldr	r2, [r3, #28]
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800199e:	4918      	ldr	r1, [pc, #96]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80019a0:	400a      	ands	r2, r1
 80019a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2201      	movs	r2, #1
 80019aa:	4013      	ands	r3, r2
 80019ac:	d009      	beq.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	2203      	movs	r2, #3
 80019b4:	4393      	bics	r3, r2
 80019b6:	0019      	movs	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019be:	430a      	orrs	r2, r1
 80019c0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2220      	movs	r2, #32
 80019c8:	4013      	ands	r3, r2
 80019ca:	d009      	beq.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019cc:	4b07      	ldr	r3, [pc, #28]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	2210      	movs	r2, #16
 80019d2:	4393      	bics	r3, r2
 80019d4:	0019      	movs	r1, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019dc:	430a      	orrs	r2, r1
 80019de:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	0018      	movs	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b006      	add	sp, #24
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40007000 	.word	0x40007000
 80019f4:	fffffcff 	.word	0xfffffcff
 80019f8:	fffeffff 	.word	0xfffeffff
 80019fc:	00001388 	.word	0x00001388
 8001a00:	efffffff 	.word	0xefffffff

08001a04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e044      	b.n	8001aa0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d107      	bne.n	8001a2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2274      	movs	r2, #116	; 0x74
 8001a22:	2100      	movs	r1, #0
 8001a24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f7fe fe7f 	bl	800072c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2224      	movs	r2, #36	; 0x24
 8001a32:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2101      	movs	r1, #1
 8001a40:	438a      	bics	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	0018      	movs	r0, r3
 8001a48:	f000 fa3a 	bl	8001ec0 <UART_SetConfig>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d101      	bne.n	8001a56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e024      	b.n	8001aa0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	0018      	movs	r0, r3
 8001a62:	f000 fb57 	bl	8002114 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	490d      	ldr	r1, [pc, #52]	; (8001aa8 <HAL_UART_Init+0xa4>)
 8001a72:	400a      	ands	r2, r1
 8001a74:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2108      	movs	r1, #8
 8001a82:	438a      	bics	r2, r1
 8001a84:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2101      	movs	r1, #1
 8001a92:	430a      	orrs	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f000 fbef 	bl	800227c <UART_CheckIdleState>
 8001a9e:	0003      	movs	r3, r0
}
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	fffff7ff 	.word	0xfffff7ff

08001aac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	4ab4      	ldr	r2, [pc, #720]	; (8001da0 <HAL_UART_IRQHandler+0x2f4>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d112      	bne.n	8001b00 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	2220      	movs	r2, #32
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d00e      	beq.n	8001b00 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d00a      	beq.n	8001b00 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d100      	bne.n	8001af4 <HAL_UART_IRQHandler+0x48>
 8001af2:	e1ba      	b.n	8001e6a <HAL_UART_IRQHandler+0x3be>
      {
        huart->RxISR(huart);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	0010      	movs	r0, r2
 8001afc:	4798      	blx	r3
      }
      return;
 8001afe:	e1b4      	b.n	8001e6a <HAL_UART_IRQHandler+0x3be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d100      	bne.n	8001b08 <HAL_UART_IRQHandler+0x5c>
 8001b06:	e0d9      	b.n	8001cbc <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d104      	bne.n	8001b1a <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	4aa4      	ldr	r2, [pc, #656]	; (8001da4 <HAL_UART_IRQHandler+0x2f8>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	d100      	bne.n	8001b1a <HAL_UART_IRQHandler+0x6e>
 8001b18:	e0d0      	b.n	8001cbc <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d010      	beq.n	8001b44 <HAL_UART_IRQHandler+0x98>
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d00b      	beq.n	8001b44 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2201      	movs	r2, #1
 8001b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	589b      	ldr	r3, [r3, r2]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2180      	movs	r1, #128	; 0x80
 8001b42:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	2202      	movs	r2, #2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d00f      	beq.n	8001b6c <HAL_UART_IRQHandler+0xc0>
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4013      	ands	r3, r2
 8001b52:	d00b      	beq.n	8001b6c <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2280      	movs	r2, #128	; 0x80
 8001b60:	589b      	ldr	r3, [r3, r2]
 8001b62:	2204      	movs	r2, #4
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2180      	movs	r1, #128	; 0x80
 8001b6a:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	2204      	movs	r2, #4
 8001b70:	4013      	ands	r3, r2
 8001b72:	d00f      	beq.n	8001b94 <HAL_UART_IRQHandler+0xe8>
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	2201      	movs	r2, #1
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d00b      	beq.n	8001b94 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2204      	movs	r2, #4
 8001b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2280      	movs	r2, #128	; 0x80
 8001b88:	589b      	ldr	r3, [r3, r2]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	2208      	movs	r2, #8
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d013      	beq.n	8001bc4 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d103      	bne.n	8001bac <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001baa:	d00b      	beq.n	8001bc4 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2280      	movs	r2, #128	; 0x80
 8001bb8:	589b      	ldr	r3, [r3, r2]
 8001bba:	2208      	movs	r2, #8
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d011      	beq.n	8001bf2 <HAL_UART_IRQHandler+0x146>
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	04db      	lsls	r3, r3, #19
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d00c      	beq.n	8001bf2 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2280      	movs	r2, #128	; 0x80
 8001bde:	0112      	lsls	r2, r2, #4
 8001be0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2280      	movs	r2, #128	; 0x80
 8001be6:	589b      	ldr	r3, [r3, r2]
 8001be8:	2220      	movs	r2, #32
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2180      	movs	r1, #128	; 0x80
 8001bf0:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	589b      	ldr	r3, [r3, r2]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d100      	bne.n	8001bfe <HAL_UART_IRQHandler+0x152>
 8001bfc:	e137      	b.n	8001e6e <HAL_UART_IRQHandler+0x3c2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	2220      	movs	r2, #32
 8001c02:	4013      	ands	r3, r2
 8001c04:	d00c      	beq.n	8001c20 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d008      	beq.n	8001c20 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d004      	beq.n	8001c20 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	0010      	movs	r0, r2
 8001c1e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2280      	movs	r2, #128	; 0x80
 8001c24:	589b      	ldr	r3, [r3, r2]
 8001c26:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2240      	movs	r2, #64	; 0x40
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b40      	cmp	r3, #64	; 0x40
 8001c34:	d003      	beq.n	8001c3e <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2228      	movs	r2, #40	; 0x28
 8001c3a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001c3c:	d033      	beq.n	8001ca6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	0018      	movs	r0, r3
 8001c42:	f000 fbe1 	bl	8002408 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2240      	movs	r2, #64	; 0x40
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b40      	cmp	r3, #64	; 0x40
 8001c52:	d123      	bne.n	8001c9c <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2140      	movs	r1, #64	; 0x40
 8001c60:	438a      	bics	r2, r1
 8001c62:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d012      	beq.n	8001c92 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c70:	4a4d      	ldr	r2, [pc, #308]	; (8001da8 <HAL_UART_IRQHandler+0x2fc>)
 8001c72:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f7fe ff75 	bl	8000b68 <HAL_DMA_Abort_IT>
 8001c7e:	1e03      	subs	r3, r0, #0
 8001c80:	d01a      	beq.n	8001cb8 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c90:	e012      	b.n	8001cb8 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	0018      	movs	r0, r3
 8001c96:	f000 f8ff 	bl	8001e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c9a:	e00d      	b.n	8001cb8 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f000 f8fa 	bl	8001e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ca4:	e008      	b.n	8001cb8 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f000 f8f5 	bl	8001e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2280      	movs	r2, #128	; 0x80
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001cb6:	e0da      	b.n	8001e6e <HAL_UART_IRQHandler+0x3c2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cb8:	46c0      	nop			; (mov r8, r8)
    return;
 8001cba:	e0d8      	b.n	8001e6e <HAL_UART_IRQHandler+0x3c2>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d000      	beq.n	8001cc6 <HAL_UART_IRQHandler+0x21a>
 8001cc4:	e0b2      	b.n	8001e2c <HAL_UART_IRQHandler+0x380>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	2210      	movs	r2, #16
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d100      	bne.n	8001cd0 <HAL_UART_IRQHandler+0x224>
 8001cce:	e0ad      	b.n	8001e2c <HAL_UART_IRQHandler+0x380>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2210      	movs	r2, #16
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d100      	bne.n	8001cda <HAL_UART_IRQHandler+0x22e>
 8001cd8:	e0a8      	b.n	8001e2c <HAL_UART_IRQHandler+0x380>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2210      	movs	r2, #16
 8001ce0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2240      	movs	r2, #64	; 0x40
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b40      	cmp	r3, #64	; 0x40
 8001cee:	d15f      	bne.n	8001db0 <HAL_UART_IRQHandler+0x304>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	2108      	movs	r1, #8
 8001cfa:	187b      	adds	r3, r7, r1
 8001cfc:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d100      	bne.n	8001d08 <HAL_UART_IRQHandler+0x25c>
 8001d06:	e0b4      	b.n	8001e72 <HAL_UART_IRQHandler+0x3c6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2258      	movs	r2, #88	; 0x58
 8001d0c:	5a9b      	ldrh	r3, [r3, r2]
 8001d0e:	187a      	adds	r2, r7, r1
 8001d10:	8812      	ldrh	r2, [r2, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d300      	bcc.n	8001d18 <HAL_UART_IRQHandler+0x26c>
 8001d16:	e0ac      	b.n	8001e72 <HAL_UART_IRQHandler+0x3c6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	187a      	adds	r2, r7, r1
 8001d1c:	215a      	movs	r1, #90	; 0x5a
 8001d1e:	8812      	ldrh	r2, [r2, #0]
 8001d20:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	2b20      	cmp	r3, #32
 8001d2a:	d02a      	beq.n	8001d82 <HAL_UART_IRQHandler+0x2d6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	491d      	ldr	r1, [pc, #116]	; (8001dac <HAL_UART_IRQHandler+0x300>)
 8001d38:	400a      	ands	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2101      	movs	r1, #1
 8001d48:	438a      	bics	r2, r1
 8001d4a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2140      	movs	r1, #64	; 0x40
 8001d58:	438a      	bics	r2, r1
 8001d5a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2110      	movs	r1, #16
 8001d74:	438a      	bics	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f7fe febb 	bl	8000af8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2258      	movs	r2, #88	; 0x58
 8001d86:	5a9a      	ldrh	r2, [r3, r2]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	215a      	movs	r1, #90	; 0x5a
 8001d8c:	5a5b      	ldrh	r3, [r3, r1]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	0011      	movs	r1, r2
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f000 f885 	bl	8001ea8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001d9e:	e068      	b.n	8001e72 <HAL_UART_IRQHandler+0x3c6>
 8001da0:	0000080f 	.word	0x0000080f
 8001da4:	04000120 	.word	0x04000120
 8001da8:	08002469 	.word	0x08002469
 8001dac:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2258      	movs	r2, #88	; 0x58
 8001db4:	5a99      	ldrh	r1, [r3, r2]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	225a      	movs	r2, #90	; 0x5a
 8001dba:	5a9b      	ldrh	r3, [r3, r2]
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	200a      	movs	r0, #10
 8001dc0:	183b      	adds	r3, r7, r0
 8001dc2:	1a8a      	subs	r2, r1, r2
 8001dc4:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	225a      	movs	r2, #90	; 0x5a
 8001dca:	5a9b      	ldrh	r3, [r3, r2]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d051      	beq.n	8001e76 <HAL_UART_IRQHandler+0x3ca>
          &&(nb_rx_data > 0U) )
 8001dd2:	183b      	adds	r3, r7, r0
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d04d      	beq.n	8001e76 <HAL_UART_IRQHandler+0x3ca>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4927      	ldr	r1, [pc, #156]	; (8001e84 <HAL_UART_IRQHandler+0x3d8>)
 8001de6:	400a      	ands	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2101      	movs	r1, #1
 8001df6:	438a      	bics	r2, r1
 8001df8:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2110      	movs	r1, #16
 8001e18:	438a      	bics	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001e1c:	183b      	adds	r3, r7, r0
 8001e1e:	881a      	ldrh	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	0011      	movs	r1, r2
 8001e24:	0018      	movs	r0, r3
 8001e26:	f000 f83f 	bl	8001ea8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001e2a:	e024      	b.n	8001e76 <HAL_UART_IRQHandler+0x3ca>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	2280      	movs	r2, #128	; 0x80
 8001e30:	4013      	ands	r3, r2
 8001e32:	d00d      	beq.n	8001e50 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2280      	movs	r2, #128	; 0x80
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d009      	beq.n	8001e50 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01a      	beq.n	8001e7a <HAL_UART_IRQHandler+0x3ce>
    {
      huart->TxISR(huart);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	0010      	movs	r0, r2
 8001e4c:	4798      	blx	r3
    }
    return;
 8001e4e:	e014      	b.n	8001e7a <HAL_UART_IRQHandler+0x3ce>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	2240      	movs	r2, #64	; 0x40
 8001e54:	4013      	ands	r3, r2
 8001e56:	d011      	beq.n	8001e7c <HAL_UART_IRQHandler+0x3d0>
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2240      	movs	r2, #64	; 0x40
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d00d      	beq.n	8001e7c <HAL_UART_IRQHandler+0x3d0>
  {
    UART_EndTransmit_IT(huart);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	0018      	movs	r0, r3
 8001e64:	f000 fb17 	bl	8002496 <UART_EndTransmit_IT>
    return;
 8001e68:	e008      	b.n	8001e7c <HAL_UART_IRQHandler+0x3d0>
      return;
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	e006      	b.n	8001e7c <HAL_UART_IRQHandler+0x3d0>
    return;
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	e004      	b.n	8001e7c <HAL_UART_IRQHandler+0x3d0>
      return;
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	e002      	b.n	8001e7c <HAL_UART_IRQHandler+0x3d0>
      return;
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	e000      	b.n	8001e7c <HAL_UART_IRQHandler+0x3d0>
    return;
 8001e7a:	46c0      	nop			; (mov r8, r8)
  }

}
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	b008      	add	sp, #32
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	fffffedf 	.word	0xfffffedf

08001e88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8001e90:	46c0      	nop			; (mov r8, r8)
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b002      	add	sp, #8
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001ea0:	46c0      	nop			; (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b002      	add	sp, #8
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	000a      	movs	r2, r1
 8001eb2:	1cbb      	adds	r3, r7, #2
 8001eb4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b002      	add	sp, #8
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ec8:	231e      	movs	r3, #30
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a84      	ldr	r2, [pc, #528]	; (8002100 <UART_SetConfig+0x240>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4a7f      	ldr	r2, [pc, #508]	; (8002104 <UART_SetConfig+0x244>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4a76      	ldr	r2, [pc, #472]	; (8002108 <UART_SetConfig+0x248>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	0019      	movs	r1, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f3c:	4b73      	ldr	r3, [pc, #460]	; (800210c <UART_SetConfig+0x24c>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	2203      	movs	r2, #3
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d00d      	beq.n	8001f64 <UART_SetConfig+0xa4>
 8001f48:	d81b      	bhi.n	8001f82 <UART_SetConfig+0xc2>
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d014      	beq.n	8001f78 <UART_SetConfig+0xb8>
 8001f4e:	d818      	bhi.n	8001f82 <UART_SetConfig+0xc2>
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <UART_SetConfig+0x9a>
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d00a      	beq.n	8001f6e <UART_SetConfig+0xae>
 8001f58:	e013      	b.n	8001f82 <UART_SetConfig+0xc2>
 8001f5a:	231f      	movs	r3, #31
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	e012      	b.n	8001f8a <UART_SetConfig+0xca>
 8001f64:	231f      	movs	r3, #31
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	2202      	movs	r2, #2
 8001f6a:	701a      	strb	r2, [r3, #0]
 8001f6c:	e00d      	b.n	8001f8a <UART_SetConfig+0xca>
 8001f6e:	231f      	movs	r3, #31
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	2204      	movs	r2, #4
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	e008      	b.n	8001f8a <UART_SetConfig+0xca>
 8001f78:	231f      	movs	r3, #31
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	701a      	strb	r2, [r3, #0]
 8001f80:	e003      	b.n	8001f8a <UART_SetConfig+0xca>
 8001f82:	231f      	movs	r3, #31
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	2210      	movs	r2, #16
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69da      	ldr	r2, [r3, #28]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d15d      	bne.n	8002054 <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8001f98:	231f      	movs	r3, #31
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d015      	beq.n	8001fce <UART_SetConfig+0x10e>
 8001fa2:	dc18      	bgt.n	8001fd6 <UART_SetConfig+0x116>
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d00d      	beq.n	8001fc4 <UART_SetConfig+0x104>
 8001fa8:	dc15      	bgt.n	8001fd6 <UART_SetConfig+0x116>
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <UART_SetConfig+0xf4>
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d005      	beq.n	8001fbe <UART_SetConfig+0xfe>
 8001fb2:	e010      	b.n	8001fd6 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001fb4:	f7ff fc42 	bl	800183c <HAL_RCC_GetPCLK1Freq>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	61bb      	str	r3, [r7, #24]
        break;
 8001fbc:	e012      	b.n	8001fe4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001fbe:	4b54      	ldr	r3, [pc, #336]	; (8002110 <UART_SetConfig+0x250>)
 8001fc0:	61bb      	str	r3, [r7, #24]
        break;
 8001fc2:	e00f      	b.n	8001fe4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001fc4:	f7ff fbcc 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	61bb      	str	r3, [r7, #24]
        break;
 8001fcc:	e00a      	b.n	8001fe4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	61bb      	str	r3, [r7, #24]
        break;
 8001fd4:	e006      	b.n	8001fe4 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001fda:	231e      	movs	r3, #30
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
        break;
 8001fe2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d100      	bne.n	8001fec <UART_SetConfig+0x12c>
 8001fea:	e07b      	b.n	80020e4 <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	005a      	lsls	r2, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	085b      	lsrs	r3, r3, #1
 8001ff6:	18d2      	adds	r2, r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	0010      	movs	r0, r2
 8002000:	f7fe f882 	bl	8000108 <__udivsi3>
 8002004:	0003      	movs	r3, r0
 8002006:	b29b      	uxth	r3, r3
 8002008:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	2b0f      	cmp	r3, #15
 800200e:	d91c      	bls.n	800204a <UART_SetConfig+0x18a>
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	2380      	movs	r3, #128	; 0x80
 8002014:	025b      	lsls	r3, r3, #9
 8002016:	429a      	cmp	r2, r3
 8002018:	d217      	bcs.n	800204a <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	b29a      	uxth	r2, r3
 800201e:	200e      	movs	r0, #14
 8002020:	183b      	adds	r3, r7, r0
 8002022:	210f      	movs	r1, #15
 8002024:	438a      	bics	r2, r1
 8002026:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	b29b      	uxth	r3, r3
 800202e:	2207      	movs	r2, #7
 8002030:	4013      	ands	r3, r2
 8002032:	b299      	uxth	r1, r3
 8002034:	183b      	adds	r3, r7, r0
 8002036:	183a      	adds	r2, r7, r0
 8002038:	8812      	ldrh	r2, [r2, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	183a      	adds	r2, r7, r0
 8002044:	8812      	ldrh	r2, [r2, #0]
 8002046:	60da      	str	r2, [r3, #12]
 8002048:	e04c      	b.n	80020e4 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 800204a:	231e      	movs	r3, #30
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
 8002052:	e047      	b.n	80020e4 <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002054:	231f      	movs	r3, #31
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b08      	cmp	r3, #8
 800205c:	d015      	beq.n	800208a <UART_SetConfig+0x1ca>
 800205e:	dc18      	bgt.n	8002092 <UART_SetConfig+0x1d2>
 8002060:	2b04      	cmp	r3, #4
 8002062:	d00d      	beq.n	8002080 <UART_SetConfig+0x1c0>
 8002064:	dc15      	bgt.n	8002092 <UART_SetConfig+0x1d2>
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <UART_SetConfig+0x1b0>
 800206a:	2b02      	cmp	r3, #2
 800206c:	d005      	beq.n	800207a <UART_SetConfig+0x1ba>
 800206e:	e010      	b.n	8002092 <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002070:	f7ff fbe4 	bl	800183c <HAL_RCC_GetPCLK1Freq>
 8002074:	0003      	movs	r3, r0
 8002076:	61bb      	str	r3, [r7, #24]
        break;
 8002078:	e012      	b.n	80020a0 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800207a:	4b25      	ldr	r3, [pc, #148]	; (8002110 <UART_SetConfig+0x250>)
 800207c:	61bb      	str	r3, [r7, #24]
        break;
 800207e:	e00f      	b.n	80020a0 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002080:	f7ff fb6e 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 8002084:	0003      	movs	r3, r0
 8002086:	61bb      	str	r3, [r7, #24]
        break;
 8002088:	e00a      	b.n	80020a0 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800208a:	2380      	movs	r3, #128	; 0x80
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	61bb      	str	r3, [r7, #24]
        break;
 8002090:	e006      	b.n	80020a0 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 8002092:	2300      	movs	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002096:	231e      	movs	r3, #30
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
        break;
 800209e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d01e      	beq.n	80020e4 <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	085a      	lsrs	r2, r3, #1
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	18d2      	adds	r2, r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	0019      	movs	r1, r3
 80020b6:	0010      	movs	r0, r2
 80020b8:	f7fe f826 	bl	8000108 <__udivsi3>
 80020bc:	0003      	movs	r3, r0
 80020be:	b29b      	uxth	r3, r3
 80020c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	2b0f      	cmp	r3, #15
 80020c6:	d909      	bls.n	80020dc <UART_SetConfig+0x21c>
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	025b      	lsls	r3, r3, #9
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d204      	bcs.n	80020dc <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	e003      	b.n	80020e4 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 80020dc:	231e      	movs	r3, #30
 80020de:	18fb      	adds	r3, r7, r3
 80020e0:	2201      	movs	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80020f0:	231e      	movs	r3, #30
 80020f2:	18fb      	adds	r3, r7, r3
 80020f4:	781b      	ldrb	r3, [r3, #0]
}
 80020f6:	0018      	movs	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b008      	add	sp, #32
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	ffff69f3 	.word	0xffff69f3
 8002104:	ffffcfff 	.word	0xffffcfff
 8002108:	fffff4ff 	.word	0xfffff4ff
 800210c:	40021000 	.word	0x40021000
 8002110:	007a1200 	.word	0x007a1200

08002114 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	2201      	movs	r2, #1
 8002122:	4013      	ands	r3, r2
 8002124:	d00b      	beq.n	800213e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4a4a      	ldr	r2, [pc, #296]	; (8002258 <UART_AdvFeatureConfig+0x144>)
 800212e:	4013      	ands	r3, r2
 8002130:	0019      	movs	r1, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	2202      	movs	r2, #2
 8002144:	4013      	ands	r3, r2
 8002146:	d00b      	beq.n	8002160 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4a43      	ldr	r2, [pc, #268]	; (800225c <UART_AdvFeatureConfig+0x148>)
 8002150:	4013      	ands	r3, r2
 8002152:	0019      	movs	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	2204      	movs	r2, #4
 8002166:	4013      	ands	r3, r2
 8002168:	d00b      	beq.n	8002182 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4a3b      	ldr	r2, [pc, #236]	; (8002260 <UART_AdvFeatureConfig+0x14c>)
 8002172:	4013      	ands	r3, r2
 8002174:	0019      	movs	r1, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	2208      	movs	r2, #8
 8002188:	4013      	ands	r3, r2
 800218a:	d00b      	beq.n	80021a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4a34      	ldr	r2, [pc, #208]	; (8002264 <UART_AdvFeatureConfig+0x150>)
 8002194:	4013      	ands	r3, r2
 8002196:	0019      	movs	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	2210      	movs	r2, #16
 80021aa:	4013      	ands	r3, r2
 80021ac:	d00b      	beq.n	80021c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4a2c      	ldr	r2, [pc, #176]	; (8002268 <UART_AdvFeatureConfig+0x154>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	2220      	movs	r2, #32
 80021cc:	4013      	ands	r3, r2
 80021ce:	d00b      	beq.n	80021e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	4a25      	ldr	r2, [pc, #148]	; (800226c <UART_AdvFeatureConfig+0x158>)
 80021d8:	4013      	ands	r3, r2
 80021da:	0019      	movs	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	2240      	movs	r2, #64	; 0x40
 80021ee:	4013      	ands	r3, r2
 80021f0:	d01d      	beq.n	800222e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4a1d      	ldr	r2, [pc, #116]	; (8002270 <UART_AdvFeatureConfig+0x15c>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	035b      	lsls	r3, r3, #13
 8002212:	429a      	cmp	r2, r3
 8002214:	d10b      	bne.n	800222e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4a15      	ldr	r2, [pc, #84]	; (8002274 <UART_AdvFeatureConfig+0x160>)
 800221e:	4013      	ands	r3, r2
 8002220:	0019      	movs	r1, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	2280      	movs	r2, #128	; 0x80
 8002234:	4013      	ands	r3, r2
 8002236:	d00b      	beq.n	8002250 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4a0e      	ldr	r2, [pc, #56]	; (8002278 <UART_AdvFeatureConfig+0x164>)
 8002240:	4013      	ands	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	605a      	str	r2, [r3, #4]
  }
}
 8002250:	46c0      	nop			; (mov r8, r8)
 8002252:	46bd      	mov	sp, r7
 8002254:	b002      	add	sp, #8
 8002256:	bd80      	pop	{r7, pc}
 8002258:	fffdffff 	.word	0xfffdffff
 800225c:	fffeffff 	.word	0xfffeffff
 8002260:	fffbffff 	.word	0xfffbffff
 8002264:	ffff7fff 	.word	0xffff7fff
 8002268:	ffffefff 	.word	0xffffefff
 800226c:	ffffdfff 	.word	0xffffdfff
 8002270:	ffefffff 	.word	0xffefffff
 8002274:	ff9fffff 	.word	0xff9fffff
 8002278:	fff7ffff 	.word	0xfff7ffff

0800227c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af02      	add	r7, sp, #8
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2280      	movs	r2, #128	; 0x80
 8002288:	2100      	movs	r1, #0
 800228a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800228c:	f7fe fb28 	bl	80008e0 <HAL_GetTick>
 8002290:	0003      	movs	r3, r0
 8002292:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2208      	movs	r2, #8
 800229c:	4013      	ands	r3, r2
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d10c      	bne.n	80022bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2280      	movs	r2, #128	; 0x80
 80022a6:	0391      	lsls	r1, r2, #14
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4a17      	ldr	r2, [pc, #92]	; (8002308 <UART_CheckIdleState+0x8c>)
 80022ac:	9200      	str	r2, [sp, #0]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f000 f82c 	bl	800230c <UART_WaitOnFlagUntilTimeout>
 80022b4:	1e03      	subs	r3, r0, #0
 80022b6:	d001      	beq.n	80022bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e021      	b.n	8002300 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2204      	movs	r2, #4
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d10c      	bne.n	80022e4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2280      	movs	r2, #128	; 0x80
 80022ce:	03d1      	lsls	r1, r2, #15
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	4a0d      	ldr	r2, [pc, #52]	; (8002308 <UART_CheckIdleState+0x8c>)
 80022d4:	9200      	str	r2, [sp, #0]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f000 f818 	bl	800230c <UART_WaitOnFlagUntilTimeout>
 80022dc:	1e03      	subs	r3, r0, #0
 80022de:	d001      	beq.n	80022e4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e00d      	b.n	8002300 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2220      	movs	r2, #32
 80022ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2274      	movs	r2, #116	; 0x74
 80022fa:	2100      	movs	r1, #0
 80022fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	0018      	movs	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	b004      	add	sp, #16
 8002306:	bd80      	pop	{r7, pc}
 8002308:	01ffffff 	.word	0x01ffffff

0800230c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	1dfb      	adds	r3, r7, #7
 800231a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800231c:	e05e      	b.n	80023dc <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	3301      	adds	r3, #1
 8002322:	d05b      	beq.n	80023dc <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002324:	f7fe fadc 	bl	80008e0 <HAL_GetTick>
 8002328:	0002      	movs	r2, r0
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	429a      	cmp	r2, r3
 8002332:	d302      	bcc.n	800233a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d11b      	bne.n	8002372 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	492f      	ldr	r1, [pc, #188]	; (8002404 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002346:	400a      	ands	r2, r1
 8002348:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2101      	movs	r1, #1
 8002356:	438a      	bics	r2, r1
 8002358:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2220      	movs	r2, #32
 800235e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2274      	movs	r2, #116	; 0x74
 800236a:	2100      	movs	r1, #0
 800236c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e044      	b.n	80023fc <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2204      	movs	r2, #4
 800237a:	4013      	ands	r3, r2
 800237c:	d02e      	beq.n	80023dc <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69da      	ldr	r2, [r3, #28]
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	401a      	ands	r2, r3
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	429a      	cmp	r2, r3
 8002390:	d124      	bne.n	80023dc <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2280      	movs	r2, #128	; 0x80
 8002398:	0112      	lsls	r2, r2, #4
 800239a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4917      	ldr	r1, [pc, #92]	; (8002404 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80023a8:	400a      	ands	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2101      	movs	r1, #1
 80023b8:	438a      	bics	r2, r1
 80023ba:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2220      	movs	r2, #32
 80023c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2280      	movs	r2, #128	; 0x80
 80023cc:	2120      	movs	r1, #32
 80023ce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2274      	movs	r2, #116	; 0x74
 80023d4:	2100      	movs	r1, #0
 80023d6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e00f      	b.n	80023fc <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	4013      	ands	r3, r2
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	425a      	negs	r2, r3
 80023ec:	4153      	adcs	r3, r2
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	001a      	movs	r2, r3
 80023f2:	1dfb      	adds	r3, r7, #7
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d091      	beq.n	800231e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	0018      	movs	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	b004      	add	sp, #16
 8002402:	bd80      	pop	{r7, pc}
 8002404:	fffffe5f 	.word	0xfffffe5f

08002408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4912      	ldr	r1, [pc, #72]	; (8002464 <UART_EndRxTransfer+0x5c>)
 800241c:	400a      	ands	r2, r1
 800241e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2101      	movs	r1, #1
 800242c:	438a      	bics	r2, r1
 800242e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002434:	2b01      	cmp	r3, #1
 8002436:	d107      	bne.n	8002448 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2110      	movs	r1, #16
 8002444:	438a      	bics	r2, r1
 8002446:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	665a      	str	r2, [r3, #100]	; 0x64
}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	46bd      	mov	sp, r7
 800245e:	b002      	add	sp, #8
 8002460:	bd80      	pop	{r7, pc}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	fffffedf 	.word	0xfffffedf

08002468 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	225a      	movs	r2, #90	; 0x5a
 800247a:	2100      	movs	r1, #0
 800247c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2252      	movs	r2, #82	; 0x52
 8002482:	2100      	movs	r1, #0
 8002484:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	0018      	movs	r0, r3
 800248a:	f7ff fd05 	bl	8001e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	b004      	add	sp, #16
 8002494:	bd80      	pop	{r7, pc}

08002496 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2140      	movs	r1, #64	; 0x40
 80024aa:	438a      	bics	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2220      	movs	r2, #32
 80024b2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	0018      	movs	r0, r3
 80024be:	f7ff fce3 	bl	8001e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b002      	add	sp, #8
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <__libc_init_array>:
 80024cc:	b570      	push	{r4, r5, r6, lr}
 80024ce:	2600      	movs	r6, #0
 80024d0:	4d0c      	ldr	r5, [pc, #48]	; (8002504 <__libc_init_array+0x38>)
 80024d2:	4c0d      	ldr	r4, [pc, #52]	; (8002508 <__libc_init_array+0x3c>)
 80024d4:	1b64      	subs	r4, r4, r5
 80024d6:	10a4      	asrs	r4, r4, #2
 80024d8:	42a6      	cmp	r6, r4
 80024da:	d109      	bne.n	80024f0 <__libc_init_array+0x24>
 80024dc:	2600      	movs	r6, #0
 80024de:	f000 f821 	bl	8002524 <_init>
 80024e2:	4d0a      	ldr	r5, [pc, #40]	; (800250c <__libc_init_array+0x40>)
 80024e4:	4c0a      	ldr	r4, [pc, #40]	; (8002510 <__libc_init_array+0x44>)
 80024e6:	1b64      	subs	r4, r4, r5
 80024e8:	10a4      	asrs	r4, r4, #2
 80024ea:	42a6      	cmp	r6, r4
 80024ec:	d105      	bne.n	80024fa <__libc_init_array+0x2e>
 80024ee:	bd70      	pop	{r4, r5, r6, pc}
 80024f0:	00b3      	lsls	r3, r6, #2
 80024f2:	58eb      	ldr	r3, [r5, r3]
 80024f4:	4798      	blx	r3
 80024f6:	3601      	adds	r6, #1
 80024f8:	e7ee      	b.n	80024d8 <__libc_init_array+0xc>
 80024fa:	00b3      	lsls	r3, r6, #2
 80024fc:	58eb      	ldr	r3, [r5, r3]
 80024fe:	4798      	blx	r3
 8002500:	3601      	adds	r6, #1
 8002502:	e7f2      	b.n	80024ea <__libc_init_array+0x1e>
 8002504:	08002574 	.word	0x08002574
 8002508:	08002574 	.word	0x08002574
 800250c:	08002574 	.word	0x08002574
 8002510:	08002578 	.word	0x08002578

08002514 <memset>:
 8002514:	0003      	movs	r3, r0
 8002516:	1882      	adds	r2, r0, r2
 8002518:	4293      	cmp	r3, r2
 800251a:	d100      	bne.n	800251e <memset+0xa>
 800251c:	4770      	bx	lr
 800251e:	7019      	strb	r1, [r3, #0]
 8002520:	3301      	adds	r3, #1
 8002522:	e7f9      	b.n	8002518 <memset+0x4>

08002524 <_init>:
 8002524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252a:	bc08      	pop	{r3}
 800252c:	469e      	mov	lr, r3
 800252e:	4770      	bx	lr

08002530 <_fini>:
 8002530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002536:	bc08      	pop	{r3}
 8002538:	469e      	mov	lr, r3
 800253a:	4770      	bx	lr
